#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.config/emacs/init.el :results none

* Early Init
** Warning
#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
;;; early-init.el -*- lexical-binding: t; -*-
;; NOTE: This file is generated from emacs.org
#+end_src

** Increase Garbage Collection Threshold
*NOTE:* The default is 800 kilobytes. The threshold is measured in bytes.
#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
(setq gc-cons-threshold (* 1 1000 1000 1000))
#+end_src

** Startup Performance
#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

** Start Native Compilation
#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

* Intit
** Warning
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
;;; init.el
;; NOTE: This file is generated from emacs.org
#+end_src

* Package Management
** Enable AOT Compilation of External Packages
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq package-native-compile t)
#+end_src

** Setup Package Sources
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Setup Use-Package
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Automatic Package Updates
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** No Littering
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package no-littering)
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

** Restart Emacs
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package restart-emacs
  :commands (restart-emacs))
#+end_src

* Performance Improvements
** Asynchronous Processes
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package async
  :init (dired-async-mode 1))
#+end_src

* User Interface
** Clear Default UI
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+end_src

** Set Fringe Mode Size
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(set-fringe-mode 10)
#+end_src

** Disable Cursor Blinking
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(blink-cursor-mode -1)
#+end_src

** Disable Bell
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq ring-bell-function 'ignore)
#+end_src

** Enable "y/n" Answers
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Set UTF-8 Encoding
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

** Highlight Current Line
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+end_src

** Line Numbers
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  org-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Good Scrolling
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package good-scroll
  :config
  (good-scroll-mode 1))
#+end_src

** Start Emacs Maximized
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  ;;(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Use Transparent Frames
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(set-frame-parameter (selected-frame) 'alpha '(80 . 80))
(add-to-list 'default-frame-alist '(alpha . (80 . 80)))
#+end_src

** Font Configuration
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(set-face-attribute 'default nil
  :family "Fira Code Retina"
  :height 120)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
  :family "Fira Code Retina"
  :height 1.0)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
  :family "Noto Sans"
  :height 1.0)

(use-package mixed-pitch
  :hook (text-mode . mixed-pitch-mode))
#+end_src

* Theme Configuration
** Setup Theme
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
;; Good Dark Themes: doom-meltbus doom-tomorrow-night

;; Good Light Themes: doom-solarized-light doom-tomorrow-day doom-homage-white doom-acario-light doom-opera-light doom-nord-light modus-operandi doom-one-light doom-earl-grey adwaita doom-vivendi doom-monokai-pro
(use-package doom-themes
  :init (load-theme 'doom-moonless t))
#+end_src

** Emacs Dashboard
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice
    (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-set-init-info t))
#+end_src

** All The Icons
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package all-the-icons)
#+end_src

** Doom Modeline
*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 1)
  (doom-modeline-bar-width 2)
  (defcustom doom-modeline-hud nil)
  (doom-modeline-window-width-limit 'fill-column)
  
  (doom-modeline-buffer-file-name-style 'auto)
  (doom-modeline-irc-stylize 'identity)
  (doom-modeline-checker-simple-format t)
  (doom-modeline-vcs-max-length 12)
  (doom-modeline-number-limit 99)
  (doom-modeline-buffer-state-icon nil)
  (doom-modeline-indent-info nil)
  (doom-modeline-persp-icon nil)
  (doom-modeline-workspace-name nil)
  (doom-modeline-lsp nil)
  (doom-modeline-icon t)
  (doom-modeline-color-icon t)
  (doom-modeline-github nil)
  (doom-modeline-env-version nil)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-major-mode-color-icon nil)
  (doom-modeline-buffer-modification-icon nil)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count nil)
  (doom-modeline-gnus-timer nil)
  (doom-modeline-github-timer nil)
  (doom-modeline-buffer-encoding nil))

;; Modeline Font
(set-face-attribute 'mode-line nil :height 1.0)
#+end_src

** Display Time in Modeline
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package time
  :defer 10
  :config
  ;; Only show loads of above 0.9 in the modeline
  (setq display-time-load-average-threshold 0.9)
  ;; A list of timezones to show for `display-time-world`
  (setq zoneinfo-style-world-list
        '(("Asia/Kuala_Lumpur" "Kuala Lumpur")
          ("Europe/Berlin" "Berlin")
          ("America/Los_Angeles" "Los Angeles")
          ("America/New_York" "New York")
          ("Australia/Sydney" "Sydney")))
  (setq display-time-24hr-format t)
  (setq display-time-format "| %H:%M | %m/%d/%y |"))
#+end_src

** Battery Indicator
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
;;(use-package fancy-battery :config (display-battery-mode))
;;(display-battery-mode)
#+end_src

** System Monitor
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package symon :bind ("s-h" . symon-mode))
#+end_src

* Desktop Environment
** Polybar
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defvar my/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun my/kill-panel ()
    (interactive)
    (when my/polybar-process
      (ignore-errors
        (kill-process my/polybar-process)))
    (setq my/polybar-process nil))

  (defun my/start-panel ()
    (interactive)
    (my/kill-panel)
    (setq my/polybar-process (start-process-shell-command
                               "polybar" nil "polybar panel")))
#+end_src
  
** Setup EXWM
*** Set Wallpaper
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(defun my/set-wallpaper ()
  (interactive)
  (start-process-shell-command
   "feh" nil "feh --bg-scale $BACKGROUNDS/2001_A_Space_Odyssey.jpg"))
#+end_src

*** Add Transparency
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(defconst transsetDefault ".6")
(defun transset/set ()
  (interactive)
  (dolist (id (butlast
               (split-string
                (shell-command-to-string
                 "wmctrl -l | cut -f -1 -d ' '")
                "\n")))
    (start-process "transset" nil
                   "transset" "-i" id transsetDefault)))
#+end_src

***  Setup EXWM
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el

(defun my/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun my/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(use-package exwm
  :config
  ;; Setup Resolution
  (require 'exwm-randr)
  (exwm-randr-enable)
  (start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --primary --mode 3840x2160 --pos 0x0 --rotate normal --output DP-1 --off --output HDMI-1 --off")

  (start-process-shell-command "picom" nil "picom")
  (my/set-wallpaper)
  
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 5)

  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'my/exwm-update-class)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\C-w
          ?\C-c
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\:
          escape
          XF86AudioPrev
          XF86AudioNext
          XF86AudioPlay
          XF86AudioStop
          XF86AudioMute
          XF86AudioRaiseVolume
          XF86AudioLowerVolume
          XF86MonBrightnessUp
          XF86MonBrightnessDown
          ?\C-\M-j
          ?\C-\ ))

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via
          ;; exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ;; Switch to workspace 0 using S-`
          ([?\s-`] . (lambda () (interactive)
                       (exwm-workspace-switch-create 0)))

          ;; 's-N': Switch to certain workspacw with Super 
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i )) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  
  ;; Start Emacs Server
  (server-start)
  
  ;; Start the Polybar panel
  (my/start-panel)

  (defun my/send-polybar-hook (module-name hook-index)
    (start-process-shell-command
     "polybar-msg" nil
     (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun my/send-polybar-exwm-workspace ()
    (my/send-polybar-hook "exwm-workspace" 1))
  
  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook
            #'my/send-polybar-exwm-workspace)
  
  ;; Let emacs handle queries for gpg passwords
  (setf epg-pinentry-mode 'loopback)
  (defun pinentry-emacs (desc prompt ok error)
    (let ((str (read-passwd
                (concat (replace-regexp-in-string
                         "%22" "\"" (replace-regexp-in-string
                                     "%OA" "\n" desc)) prompt ": "))))
      str))

  (exwm-enable))

#+end_src

** exwm-evil-firefox
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package exwm-firefox-evil
  :after exwm
  :hook (exwm-manage-finish-hook . exwm-firefox-evil-activate-if-firefox))
#+end_src

** Audio Support
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(with-eval-after-load 'exwm
    (defconst volumeModifier "4")

    (defun audio/mute ()
        (interactive)
        (start-process "audio-mute" nil "pulsemixer" "--toggle-mute"))
    (defun audio/raise-volume ()
        (interactive)
        (start-process "raise-volume" nil
                       "pulsemixer" "--change-volume" (concat "+" volumeModifier)))
    (defun audio/lower-volume ()
        (interactive)
        (start-process "lower-volume" nil
                       "pulsemixer" "--change-volume" (concat "-" volumeModifier)))

    (defun audio/prev ()
        (interactive)
        (start-process "audio-prev" nil "playerctl" "previous"))
    (defun audio/next ()
        (interactive)
        (start-process "audio-next" nil "playerctl" "next"))
    (defun audio/play ()
        (interactive)
        (start-process "audio-play" nil "playerctl" "play"))
    (defun audio/stop ()
        (interactive)
        (start-process "audio-stop" nil "playerctl" "stop"))
    (defun audio/play-pause ()
        (interactive)
        (start-process "audio-play-pause" nil "playerctl" "play-pause"))

    (global-set-key (kbd "<XF86AudioMute>") 'audio/mute)
    (global-set-key (kbd "<XF86AudioRaiseVolume>") 'audio/raise-volume)
    (global-set-key (kbd "<XF86AudioLowerVolume>") 'audio/lower-volume)
    (global-set-key (kbd "<XF86AudioPrev>") 'audio/prev)
    (global-set-key (kbd "<XF86AudioNext>") 'audio/next)
    (global-set-key (kbd "<XF86AudioPlay>") 'audio/play-pause)
    (global-set-key (kbd "<XF86AudioStop>") 'audio/stop))
#+end_src

** Backlight Support
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(with-eval-after-load 'exwm
  
    (defun backlight/raise-brightness ()
    (interactive)
    (start-process "raise-volume" nil
                    "brightnessctl" "set" "+5%"))

    (defun backlight/lower-brightness ()
    (interactive)
    (start-process "lower-volume" nil
                    "brightnessctl" "set" "5%-"))

    (global-set-key (kbd "<XF86MonBrightnessUp>") 'backlight/raise-brightness)
    (global-set-key (kbd "<XF86MonBrightnessDown>") 'backlight/lower-brightness))
#+end_src

** Bluetooth Support
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package bluetooth)
#+end_src

* Keybinding Configuration
** Evil Mode
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h")
    'evil-delete-backward-char-and-join)

  (define-key evil-motion-state-map
    (kbd "<remap> <evil-next-line>") #'evil-next-visual-line)
  (define-key evil-motion-state-map
    (kbd "<remap> <evil-previous-line>") #'evil-previous-visual-line)
  (define-key evil-operator-state-map
    (kbd "<remap> <evil-next-line>") #'evil-next-line)
  (define-key evil-operator-state-map
    (kbd "<remap> <evil-previous-line>") #'evil-previous-line)

  (define-key evil-operator-state-map
    (kbd "<remap> <evil-previous-line>") #'evil-previous-line)

  (define-key evil-normal-state-map
    (kbd "<remap> <evil-quit>") #'my/exit-to-dashboard)
  (evil-define-command exit () (interactive) (save-buffers-kill-terminal)))

(defun my/exit-to-dashboard () (interactive)
  (if (eq (count-windows) 1) (switch-to-buffer "*dashboard*") (delete-window)))
#+end_src

*** Evil Collection
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** General
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package general
  :after evil
  :config
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (my/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "fde" '(lambda () (interactive)
             (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))
#+end_src

** Extra Keybindings
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Autocomplete Modes
** Which Key
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src

** Ivy
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config (ivy-mode 1))
#+end_src

*** Ivy-Rich
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1))
#+end_src

*** Ivy-Prescient
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src

** Counsel
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+end_src

* Other Modes
** Makefile Mode
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package make-mode
  :mode (("Makefile" . makefile-gmake-mode)))
#+end_src
   
** Helpful
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Focus Mode
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package focus)
#+end_src

** Solaire Mode
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package solaire-mode
  :config
  (solaire-global-mode +1))
#+end_src

** Treemacs
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package treemacs
  :after general
  :config
  (my/leader-keys
    "C-d" 'treemacs))

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

;; (use-package treemacs-icons-dired
;; :hook (dired-mode . treemacs-icons-dired-enable-once))

(use-package treemacs-magit
  :after (treemacs magit))

(use-package treemacs-persp
  :after (treemacs persp-mode))
#+end_src

* Org Mode
** Better Font Faces
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(defun my/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode '(("^ *\\([-]\\) "
                                       (0 (prog1 () (compose-region
                                                     (match-beginning 1)
                                                     (match-end 1) "•")))))))
#+end_src

** Basic Config
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq-default indent-tabs-mode nil)
(defun my/org-mode-setup ()
  (org-indent-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :hook (org-mode . my/org-mode-setup)
  :config
  (my/org-font-setup)
  (setq-default org-ellipsis " ▾"
                org-pretty-entities t
                org-hide-emphasis-markers t
                org-edit-src-content-indentation 0))
#+end_src

*** Nicer Heading Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list
   '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Center Org Buffers
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq-default fill-column 80)
(use-package olivetti
  :hook (org-mode . olivetti-mode))
#+end_src

*** Drag and Drop Images
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package org-download
  :after org
  :config
  (org-download-enable))
#+end_src

** Latex Support
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package auctex
  :defer t
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t))
  ;(setq org-format-latex-options
  ;      (plist-put org-format-latex-options :scale 4.0))

;(require 'quelpa)
;(quelpa '(calctex :fetcher url
;                  :url            "https://raw.githubusercontent.com/johnbcoughlin/calctex/master/calctex/calctex.el"))
;(quelpa '(org-calctex :fetcher url
;                      :url            "https://raw.githubusercontent.com/johnbcoughlin/calctex/master/org-calctex/org-calctex.el"))
  ;:config
  ;(setq org-format-latex-options
  ;      (plist-put org-format-latex-options :scale 4.0)))
#+end_src

** Configure Babel Languages
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Structure Templates
Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(with-eval-after-load 'org (require 'org-tempo)
                      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
                      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
                      (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Auto-tangle Configuration Files
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(defun my/org-babel-tangle-config ()
  (when (member (file-name-nondirectory (buffer-file-name))
                '("emacs.org"
                  "setup.org"))
    (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle)))) 

(add-hook 'org-mode-hook (lambda ()
                           (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

* Development
** Projectile
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/")
    (setq projectile-project-search-path '("~/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; (use-package forge
;;  :after magit)
#+end_src

** Evil Commentary
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package evil-commentary
  :config (evil-commentary-mode))
;; :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config (show-paren-mode 1))
#+end_src

* File Management
** Dired
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package dired
  :ensure nil
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-alh --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single
  :after 'dired)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :after 'dired
  :config
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+end_src

* Terminals
** Term Mode
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package term
  :commands term
  :config
  (setq explicit-shell-file-name "zsh"))
#+end_src

*** Better term-mode colors
*NOTE:* This package requires =ncurses= to be installed on your machine.
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm
*NOTE:* Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm=.
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package vterm
  :commands vterm
  :config
  (setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))
#+end_src

* WSL Config
** Copy and Paste
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(defun wsl-copy (start end)
  (interactive "r")
  (shell-command-on-region start end "clip.exe")
  (deactivate-mark))

(defun wsl-paste ()
  (interactive)
  (let ((clipboard (shell-command-to-string
                    "powershell.exe -command 'Get-Clipboard' 2> /dev/null")))
    (setq clipboard (replace-regexp-in-string "\r" "" clipboard))
    (setq clipboard (substring clipboard 0 -1))
    (insert clipboard)))

(my/leader-keys
  "C-c" 'wsl-copy
  "C-v" 'wsl-paste)
#+end_src

* Closing Configuration
** Reduce Garbage Collector Threshold
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq gc-cons-threshold (* 1 1000 1000 1000))
(setq garbage-collection-messages t)
#+end_src

** Enable File Name Handler
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(setq file-name-handler-alist file-name-handler-alist-original)
#+end_src

** Enable Garbage Collector Magic Hack
#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package gcmh
  :config
  (setq gcmh-high-cons-threshold (* 1 1000 1000 1000))
  (gcmh-mode 1))
#+end_src
