#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :mkdirp yes

* Early Init

** Warning

#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
  ;; NOTE: This file is generated from emacs.org
#+end_src

** Increase Garbage Collection Threshold

   The default is 800 kilobytes. The threshold is measured in bytes.

#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Startup Performance

#+begin_src emacs-lisp :tangle ./.config/emacs/early-init.el
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

* Intit

** Warning

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  ;; NOTE: This file is generated from emacs.org
#+end_src

* Configuration Parameters

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defvar mwg/default-font-size 160)
  (defvar mwg/default-variable-font-size 160)
  (defvar mwg/frame-transparency '(90 . 90))
#+end_src

* Package Management

** Setup Package Sources

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (require 'package)
  (setq package-archives
    '(("melpa" . "https://melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
      ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Setup Use-Package

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Automatic Package Updates

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* No Littering

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package no-littering)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Restart Emacs

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package restart-emacs
    :commands (restart-emacs))
#+end_src

* User Interface

** Clear Default Clutter

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
#+end_src

** Line Numbers

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  org-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Frame Transparency

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (set-frame-parameter (selected-frame) 'alpha mwg/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,mwg/frame-transparency))
#+end_src

** Start Emacs Maximized

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Font Configuration

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (set-face-attribute 'default nil
    :font "Fira Code Retina"
    :height mwg/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
    :font "Fira Code Retina"
    :height mwg/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
    :font "Cantarell"
    :height mwg/default-variable-font-size
    :weight 'regular)

  (use-package mixed-pitch
    :hook (text-mode . mixed-pitch-mode))
#+end_src

** Emacs Dashboard

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice
        (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-set-init-info t))
#+end_src

* Keybinding Configuration

** Evil Mode

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h")
      'evil-delete-backward-char-and-join)

    (define-key evil-motion-state-map
      (kbd "<remap> <evil-next-line>") #'evil-next-visual-line)
    (define-key evil-motion-state-map
      (kbd "<remap> <evil-previous-line>") #'evil-previous-visual-line)
    (define-key evil-operator-state-map
      (kbd "<remap> <evil-next-line>") #'evil-next-line)
    (define-key evil-operator-state-map
      (kbd "<remap> <evil-previous-line>") #'evil-previous-line)

    (define-key evil-operator-state-map
      (kbd "<remap> <evil-previous-line>") #'evil-previous-line)

    (define-key evil-normal-state-map
      (kbd "<remap> <evil-quit>") #'mwg/exit-to-dashboard)
    (evil-define-command exit () (interactive) (save-buffers-kill-terminal)))
  
  (defun mwg/exit-to-dashboard () (interactive)
    (if (eq (count-windows) 1) (switch-to-buffer "*dashboard*") (delete-window)))
#+end_src

*** Evil Collection

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** General

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package general
    :after evil
    :config
    (general-create-definer mwg/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (mwg/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

#+end_src

** Extra Keybindings

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Theme Configuration

** Setup Theme

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package doom-themes
    :init (load-theme 'doom-tomorrow-night t))
#+end_src

** All The Icons

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package all-the-icons)
#+end_src

** Doom Modeline

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 1)))

  ;; Modeline Font
  (set-face-attribute 'mode-line nil
      :height mwg/default-font-size)
#+end_src

* Autocomplete Modes

** Which Key

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** Ivy

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config (ivy-mode 1))
#+end_src

*** Ivy-Rich

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1))
#+end_src

*** Ivy-Prescient

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Counsel

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+end_src

* Other Modes

** Helpful

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Focus Mode

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package focus)
#+end_src

** Solaire Mode

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package solaire-mode
    :config
    (solaire-global-mode +1))
#+end_src

** Treemacs

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package treemacs
    :after general
    :config
    (mwg/leader-keys
      "C-d" 'treemacs))

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  ;; (use-package treemacs-icons-dired
    ;; :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-persp
    :after (treemacs persp-mode))
#+end_src

* Org Mode

** Better Font Faces

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defun mwg/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode '(("^ *\\([-]\\) "
        (0 (prog1 () (compose-region
                (match-beginning 1)
                (match-end 1) "•")))))))
#+end_src

** Basic Config

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defun mwg/org-mode-setup ()
    (org-indent-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . mwg/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)
          (mwg/org-font-setup))
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list
     '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Center Org Buffers

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defun mwg/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . mwg/org-mode-visual-fill))
#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (with-eval-after-load 'org (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =mwg/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defun mwg/org-babel-tangle-config ()
    (when (string-equal
       (file-name-nondirectory (buffer-file-name))
       "emacs.org")
      (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda ()
    (add-hook 'after-save-hook #'mwg/org-babel-tangle-config)))
#+end_src

* Development

** Projectile

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/")
      (setq projectile-project-search-path '("~/")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

** Magit

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; (use-package forge
  ;;  :after magit)
#+end_src

** Evil Commentary

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package evil-commentary
    :config (evil-commentary-mode))
    ;; :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Terminals

** Term Mode

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "zsh"))
#+end_src

*** Better term-mode colors

*NOTE:* This package requires =ncurses= to be installed on your machine.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm

*NOTE:* Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm=.

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 10000))
#+end_src

* File Management

** Dired

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

* Desktop Environment

** Setup EXWM

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
(use-package exwm
    :config
    (require 'exwm-config)
    (exwm-config-example))
#+end_src

* WSL Specific

** Copy and Paste

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (defun wsl-copy (start end)
    (interactive "r")
    (shell-command-on-region start end "clip.exe")
    (deactivate-mark))

  (defun wsl-paste () (interactive)
    (let ((clipboard (shell-command-to-string
        "powershell.exe -command 'Get-Clipboard' 2> /dev/null")))
      (setq clipboard (replace-regexp-in-string "\r" "" clipboard))
      (setq clipboard (substring clipboard 0 -1))
      (insert clipboard)))

  (mwg/leader-keys
    "C-c" 'wsl-copy
    "C-v" 'wsl-paste)
#+end_src

* Closing Configuration

** Reduce Garbage Collector Threshold

#+begin_src emacs-lisp :tangle ./.config/emacs/init.el
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
