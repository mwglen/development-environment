#+title: Setup Guide
#+PROPERTY: header-args:bash :results none
* Set GRUB to Remember Last Selection
1. Put the following in ~/etc/default/grub~
   #+begin_src bash
   GRUB_DEFAULT=saved
   GRUB_SAVEDEFAULT=true
   #+end_src

* Enable Hibernation
1. To enable hibernation, make sure that you have a swap partition. It is best to make the partition larger than the total amount of RAM on your system.
2. In ~/etc/default/grub~, add ~resume=/dev/nvme0n1p2~ to =GRUB_CMDLINE_LINUX=. Make sure to change "nvme0n1p2" with the name of your swap partition
3. Rebuild grub using the new config by running ~sudo grub-mkconfig -o ~/boot/grub/grub.cfg~
4. Reset your computer to complete the process

Now you can use ~sudo systemctl hibernate~ to hibernate and ~sudo systmectl hybrid-sleep~ to sleep. I recommend aliasing these to ~hibernate~ and ~hybrid-sleep~.

I also recommend changing the behavior of the system keys to all hibernate the computer

* Change Behavior of System Keys
1. In ~/etc/systemd/logind.conf~, edit =HandleSuspendKey=, =HandleHibernateKey=, =HandlePowerKey=, and =HandleLidSwitch=
2. Reset your computer to complete the process

* Power Saving Mode using TLP
1. Run the following commands to start using TLP:
   #+begin_src bash
   sudo pacman -S tlp
   sudo systemctl enable tlp
   sudo systemctl start tlp
   #+end_src

* Enable SSD Trim
Trim is a feature supported by most SSDs that prevents unnecessary writes and erases to lengthen your SSD's lifespan. It also increases the performance of your SSD. SSDs can only erase blocks not pages, so before it can delete a page it must save a backup of the rest of the block and then rewrite the backup after the erase. This sequence required to erase a page is known as *write amplification*. This feature allows the OS to tell the SSD what it can write over so that it doesn't have to use the erase function to begin with.

1. Make sure that your SSD supports TRIM before using the feature by running ~lsblk --discard~ and finding non-zero values for =DISC-GRAN= and =DISC-MAX=.
   
2. Run the following commands to enable trim:
   
   #+begin_src bash
   sudo systemctl enable fstrim.timer
   #+end_src

   You should now find that fstrim set up a weekly timer in ~systemctl list-timers~.


* Specify SSD Sector Size
#+begin_src bash
#+end_src

* Syncing Emails to a Local Directory
** Install Isync
*NOTE*: ~isync~ gives us the ~mbsync~ utility
#+begin_src bash
sudo pacman -S isync
#+end_src

** Create a Local Folder to Hold Emails
#+begin_src bash
mkdir -p ~/personal-documents/Mail
#+end_src

** Configure Mbsync
*NOTE*: Different distributions of linux might place the certificate file at a different location.
#+begin_src bash
cat <<EOT > $HOME/.mbsyncrc
IMAPAccount gmail
Host imap.gmail.com
User mwg2202@gmail.com
PassCmd ""
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Subfolders Verbatim
Path ~/personal-documents/Mail/
Inbox ~/personal-documents/Mail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
Create Both
SyncState *
EOT
#+end_src

** Run Mbsync
#+begin_src bash
mbsync -a
#+end_src

* Linux Password Manager
#+begin_src bash
sudo pacman -S pass
pass init "62EC2C26" # Use the last 8 characters of your GPG key's ID
#+end_src

The =passfs= addon for firefox allows you to use your password store while browsing in firefox
The =Password Store= android app allows you to access your passwords on  

* Exporting PGP Keys
#+begin_src bash
gpg --output public.pgp --armor --export username@email
gpg --output private.pgp --armor --export-secret-key username@email

# Backup Private Keys
gpg --output backupkeys.pgp --armor --export-secret-keys --export-options export-backup user@email
#+end_src

* Other Recommendations
- Add a Grub Theme
