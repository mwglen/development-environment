#+title: Guide to Setup Development Environment
#+PROPERTY: header-args:bash :dir /sudo:://
#+PROPERTY: header-args :results none
* Script Headers
** Use Bash
#+begin_src bash
#!/bin/bash
#+end_src

** Stop  Script on Error
#+begin_src bash
set -e
#+end_src

** Start
#+begin_src bash
set -v
#+end_src

**  Warning
#+begin_src bash
# NOTE: This file is generated from setup.org
#+end_src

* Make sure OS is supported
#+begin_src bash
export DISTRO=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
if ! [ "$DISTRO" = "\"Arch Linux\"" ] \
    && ! [ "$DISTRO" = "\"Arch Linux ARM\"" ]; then echo "Unsupported Platform"
    echo "Currently only Arch Linux is supported"
    return 1
fi
#+end_src

* Setup GRUB
** Set GRUB to Remember Last Selection
1. Put the following in ~/etc/default/grub~
   #+begin_src bash
   GRUB_DEFAULT=saved
   GRUB_SAVEDEFAULT=true
   #+end_src

** TODO Add a GRUB Theme
** Enable Hibernation
1. To enable hibernation, make sure that you have a swap partition. It is best to make the partition larger than the total amount of RAM on your system.
2. In ~/etc/default/grub~, add ~resume=/dev/nvme0n1p2~ to =GRUB_CMDLINE_LINUX=. Make sure to change "nvme0n1p2" with the name of your swap partition
3. Rebuild grub using the new config by running ~sudo grub-mkconfig -o ~/boot/grub/grub.cfg~
4. Reset your computer to complete the process

Now you can use ~sudo systemctl hibernate~ to hibernate and ~sudo systmectl hybrid-sleep~ to sleep. I recommend aliasing these to ~hibernate~ and ~hybrid-sleep~.

I also recommend changing the behavior of the system keys to all hibernate the computer

** Change Behavior of System Keys
1. In ~/etc/systemd/logind.conf~, edit =HandleSuspendKey=, =HandleHibernateKey=, =HandlePowerKey=, and =HandleLidSwitch=
2. Reset your computer to complete the process

* Setup XDG Base Directories
** Export Environment Variables
#+begin_src bash
cat <<EOT > $HOME/.profile
export XDG_CONFIG_HOME=$(realpath .)/.config
export XDG_CACHE_HOME=$(realpath .)/.cache
export XDG_DATA_HOME=$(realpath .)/.local/share
export XDG_STATE_HOME=$(realpath .)/.local/state
export BACKGROUNDS=$(realpath .)/backgrounds
EOT
source $HOME/.profile
#+end_src

** Clean Directories
#+begin_src bash
#rm -rf $XDG_CONFIG_HOME
#rm -rf $XDG_CACHE_HOME
#rm -rf $XDG_DATA_HOME
#rm -rf $XDG_STATE_HOME
#+end_src

** Make Directories
#+begin_src bash
mkdir -p $XDG_CONFIG_HOME
mkdir -p $XDG_CACHE_HOME
mkdir -p $XDG_DATA_HOME
mkdir -p $XDG_STATE_HOME
#+end_src

* Setup Yay
** Install Yay
#+begin_src bash
if ! (pacman -Qs ylay > /dev/null); then
    if (pacman -Qs fakeroot-tcp > /dev/null); then
        sudo pacman -Syyu --needed git base-devel \ && git clone https://aur.archlinux.org/yay.git \ && cd yay && yes | makepkg -si
    else # cannot use --noconfirm if fakeroot-tcp is installed
        sudo pacman -Syyu --needed --noconfirm git base-devel \
            && git clone https://aur.archlinux.org/yay.git \
            && cd yay && yes | makepkg -si
    fi
    rm -rf yay
fi
#+end_src

** Setup Shortcuts
#+begin_src bash
export INSTALL="yay -S --noconfirm --needed"
export INSTALL_LOCAL="yay -U --noconfirm --needed"
export REMOVE="yay -Rns --noconfirm --needed"
export UPDATE="yay -Syyu --noconfirm --needed"
export SEARCH="yay -Qs"
#+end_src

** Update Packages
#+begin_src bash
$UPDATE
#+end_src

* Fundamental Packages
** git
#+begin_src bash
$INSTALL git openssh
mkdir -p "$XDG_CONFIG_HOME"/git
touch "$XDG_CONFIG_HOME"/git/config
git config --global user.name "Matt Glen"
git config --global user.email "mwg2202@yahoo.com"
git config --global init.defaultBranch master
#+end_src

** man
#+begin_src bash
$INSTALL man-db man-pages
#+end_src

** cmake
#+begin_src bash
$INSTALL cmake
#+end_src

** rsync
#+begin_src bash
$INSTALL rsync
#+end_src

** wget
#+begin_src bash
$INSTALL wget
echo hsts-file \= "$XDG_CACHE_HOME"/wget-hsts >> "$XDG_CONFIG_HOME/wgetrc"
#+end_src

* Drivers
** USB
#+begin_src bash
$INSTALL usbutils usbip
#+end_src

** Bluetooth
#+begin_src bash
$INSTALL bluez bluez-utils bluetooth-autoconnect
sudo systemctl enable bluetooth
sudo systemctl start bluetooth
sudo systemctl enable bluetooth-autoconnect
sudo systemctl start bluetooth-autoconnect
sudo systemctl enable pulseaudio-bluetooth-autoconnect
sudo systemctl start pulseaudio-bluetooth-autoconnect

# sudo tee "/etc/bluetooth/main.conf" > /dev/null <<'EOF'
# [Policy]
# AutoEnable=true

# [General]
# DiscoverableTimeout = 0
# EOF
#+end_src

** Wifi
#+begin_src bash
$INSTALL networkmanager network-manager-applet
sudo systemctl enable NetworkManager
sudo systemctl start NetworkManager
#+end_src

** Audio
#+begin_src bash
$INSTALL pulseaudio-bluetooth alsa-utils pavucontrol playerctl
cat <<EOT >> $ZDOTDIR/.zshrc
playerctld daemon
EOT
#+end_src bash

** Printing/Scanning
*** Base Drivers
To scan I recommend using simple-scan
#+begin_src bash
$INSTALL cups sane python-pillow simple-scan
sudo systemctl enable cups
sudo systemctl start cups
#+end_src

*** Optional Drivers for HP Printers
Runs using cups and sane. Comes with a systemtray available through the ~hp-systray~ command. To get started find the ip address of your printer and then run ~hp-setup <ip-address>~.
#+begin_src bash
$INSTALL hplip
#+end_src

* Mouse Sensitivity
#+begin_src bash
Mouse=$(xinput list |grep -i M720 | awk -F= '{ print $2}'| awk '{print $1}'| awk 'BEGIN{ RS = "" ; FS = "\n" }{print $1}')

xinput set-prop $Mouse "libinput Middle Emulation Enabled" 1
xinput set-prop $Mouse "libinput Scroll Method Enabled" 0, 0, 1

# Set mouse acceleration speed (0 is off, higher is slower)
xinput set-prop $Mouse "libinput Accel Speed" 0.5

# Set sensitivity with the last number (0 is off, higher is slower)
xinput set-prop $Mouse "Coordinate Transformation Matrix" 1 0 0 0 1 0 0 0 1

#+end_src
* Setup Core Packages
** Latex
#+begin_src bash
$INSTALL tex-live-core tllocalmgr-git
tllocalmgr update
tllocalmgr install dvipng l3packages xcolor soul adjustbox collectbox amsmath amssymb siunitx
sudo texhash
#+end_src

** Setup Interactive Shell
*** Install ZSH
#+begin_src bash
$INSTALL zsh
cat <<EOT > $HOME/.zshenv
source $HOME/.profile
export ZDOTDIR=$XDG_CONFIG_HOME/zsh
alias ls="ls --color=auto -h"
alias grep="grep --color=auto"
alias ip="ip -color=auto"
alias spotify="spotify --force-device-scale-factor=2"

EOT
source $HOME/.zshenv
mkdir -p $ZDOTDIR
cat <<EOT > $ZDOTDIR/.zshrc
# zsh config
unsetopt BEEP
setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
unsetopt HIST_EXPIRE_DUPS_FIRST
unsetopt EXTENDED_HISTORY
HISTSIZE="10000"
SAVEHIST="10000"
HISTFILE="$XDG_STATE_HOME/zsh/history"
mkdir -p "$(dirname "$HISTFILE")"

EOT
#+end_src

*** Setup Pure (ZSH Theme)
#+begin_src bash
if (mkdir "$XDG_CONFIG_HOME"/zsh/pure); then
    git clone https://github.com/sindresorhus/pure.git "$XDG_CONFIG_HOME"/zsh/pure
fi
cat <<EOT >> $ZDOTDIR/.zshrc
# pure config
fpath+="$XDG_CONFIG_HOME"/zsh/pure
autoload -U promptinit; promptinit
zstyle :prompt:pure:prompt:success color green
zstyle :prompt:pure:prompt:error color red
zstyle :prompt:pure:prompt:continuation color white
zstyle :prompt:pure:virtualenv color white
zstyle :prompt:pure:execution_time color white
zstyle :prompt:pure:git:stash show yes
zstyle :prompt:pure:git:stash color white
zstyle :prompt:pure:git:arrow color white
zstyle :prompt:pure:git:action color white
zstyle :prompt:pure:git:dirty color white
zstyle :prompt:pure:git:branch color white
zstyle :prompt:pure:git:branch:cached color red
zstyle :prompt:pure:path color white
zstyle :prompt:pure:host color white
zstyle :prompt:pure:user color white
zstyle :prompt:pure:user:root color magenta
prompt pure

EOT
#+end_src

** Setup Emacs
*** Install Emacs
#+begin_src bash
$INSTALL emacs
#+end_src

*** Install Fonts
#+begin_src bash
$INSTALL cantarell-fonts ttf-fira-code
#+end_src

*** Apply Theme
#+begin_src bash
mkdir -p .config/emacs
ln ./doom-moonless-theme.el .config/emacs/doom-moonless-theme.el
#+end_src

*** Additional vterm configuration
#+begin_src bash
cat <<EOT >> $ZDOTDIR/.zshrc
# emacs config
vterm_printf(){
    if [ -n "\$TMUX" ] && ([ "\${TERM%%-*}" = "tmux" ] \
       || [ "\${TERM%%-*}" = "screen" ] ); then
        printf "\ePtmux;\e\e]%s\007\e\\\" "\$1"
    elif [ "\${TERM%%-*}" = "screen" ]; then
        printf "\eP\e]%s\007\e\\\" "\$1"
    else
        printf "\e]%s\e\\\" "\$1"
    fi
}

EOT
#+end_src

*** Tangle Emacs Config
**** Setup Nim and Nimble
#+begin_src bash
$INSTALL nim nimble
mkdir -p "$XDG_CONFIG_HOME"/nimble
mkdir -p "$XDG_DATA_HOME"/nimble
cat <<EOT > "$XDG_CONFIG_HOME"/nimble/nimble.ini
nimbleDir = "$XDG_DATA_HOME/nimble"

EOT
#+end_src

**** Setup ntangle
#+begin_src bash
nimble install -y ntangle
cat <<EOT >> $ZDOTDIR/.zshrc
# ntangle config
alias ntangle="$XDG_DATA_HOME"/nimble/bin/ntangle

EOT
#+end_src

**** Tangle Config
#+begin_src bash
mkdir -p .config/emacs
"$XDG_DATA_HOME"/nimble/bin/ntangle emacs.org
#+end_src

*** Enable Emacs Daemon
#+begin_src bash
mkdir -p "$XDG_CONFIG_HOME"/systemd/user/
cat <<EOT > "$XDG_CONFIG_HOME"/systemd/user/emacs.service
[Unit]
Description=Emacs
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
type=forking
ExecStart=/user/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on_failure

[Install]
WantedBy=default.target

EOT

rm -rf ~/.emacs.d
ln -s $XDG_CONFIG_HOME/emacs ~/.emacs.d

systemctl enable --user emacs
systemctl start --user emacs
#+end_src
* Installing NVIDIA Drivers
#+begin_src bash
sudo pacman -S nvidia
#+end_src

** NVIDIA Optimus
#+begin_src bash
sudo pacman -S nvidia-prime
sudo yay -S optimus-manager
#+end_src

Use the ~prime-run~ command to run a program using dedicated graphics.

* Power Saving Mode using TLP
1. Run the following commands to start using TLP:
   #+begin_src bash
   sudo pacman -S tlp
   sudo systemctl enable tlp
   sudo systemctl start tlp
   #+end_src

* Enable SSD Trim
Trim is a feature supported by most SSDs that prevents unnecessary writes and erases to lengthen your SSD's lifespan. It also increases the performance of your SSD. SSDs can only erase blocks not pages, so before it can delete a page it must save a backup of the rest of the block and then rewrite the backup after the erase. This sequence required to erase a page is known as *write amplification*. This feature allows the OS to tell the SSD what it can write over so that it doesn't have to use the erase function to begin with.

1. Make sure that your SSD supports TRIM before using the feature by running ~lsblk --discard~ and finding non-zero values for =DISC-GRAN= and =DISC-MAX=.
   
2. Run the following commands to enable trim:
   
   #+begin_src bash
   sudo systemctl enable fstrim.timer
   #+end_src

   You should now find that fstrim set up a weekly timer in ~systemctl list-timers~.

* TODO Specify SSD Sector Size
#+begin_src bash
#+end_src

* File System Support
** exFAT Support
#+begin_src bash
$INSTALL exfatprogs
#+end_src

** NTFS Support
#+begin_src bash
$INSTALL ntfs-3g
#+end_src

** VHD and VHDX Support
#+begin_src bash
$INSTALL libguestfs
#+end_src

* Syncing Emails to a Local Directory
** Install Isync
*NOTE*: ~isync~ gives us the ~mbsync~ utility
#+begin_src bash
sudo pacman -S isync
#+end_src

** Create a Local Folder to Hold Emails
#+begin_src bash
mkdir -p ~/personal-documents/Mail
#+end_src

** Configure Mbsync
*NOTE*: Different distributions of linux might place the certificate file at a different location.
#+begin_src bash
cat <<EOT > $HOME/.mbsyncrc
IMAPAccount gmail
Host imap.gmail.com
User mwg2202@gmail.com
PassCmd ""
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Subfolders Verbatim
Path ~/personal-documents/Mail/
Inbox ~/personal-documents/Mail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
Create Both
SyncState *
EOT
#+end_src

** Run Mbsync
#+begin_src bash
mbsync -a
#+end_src

* Linux Password Manager
#+begin_src bash
sudo pacman -S pass
pass init "62EC2C26" # Use the last 8 characters of your GPG key's ID
#+end_src

The =passfs= addon for firefox allows you to use your password store while browsing in firefox
The =Password Store= android app allows you to access your passwords on  

* Exporting PGP Keys
#+begin_src bash
gpg --output public.pgp --armor --export username@email
gpg --output private.pgp --armor --export-secret-key username@email

# Backup Private Keys
gpg --output backupkeys.pgp --armor --export-secret-keys --export-options export-backup user@email
#+end_src

* Setup a Software Access Point
** Linux-Wifi-Hotspot
~linux-wifi-hotspot~ is an AUR package that allows you to easily create a wifi-hotspot without needing to mess around with ~hostapd~, ~dnsmasq~, and ~iptables~. It includes both a gui and cli interface.
#+begin_src bash
$INSTALL linux-wifi-hotspot
#+end_src

*** Use CLI
#+begin_src bash
create_ap wlan0 eth0 MyAccessPoint MyPassPhrase
#+end_src

*** Use GUI
#+begin_src bash
wihotspot
#+end_src

* Converting ICS format to Org
See [[https://tero.hasu.is/blog/org-icalendar-import/]] for more information.
** Installing
#+begin_src bash
$INSTALL ruby
gem install date icalendar optparse tzinfo
git clone https://tero.hasu.is/repo/icalendar-to-org.git
#+end_src

**  To Use
#+begin_src bash
ics-to-org input.ics > output.org
#+end_src

* Polybar Panel
** Install Polybar
#+begin_src bash
$INSTALL polybar
mkdir -p $XDG_CONFIG_HOME/polybar
#+end_src

** Configuration
:PROPERTIES:
:header-args:conf: :tangle ./.config/polybar/config
:END:
*** Global Settings
#+begin_src conf
[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0
#+end_src

*** Themes
**** Doom Tomorrow Night Theme
#+begin_src conf :tangle no
[colors]
background = #aa1d1f21
foreground = #c5c8c6
#+end_src

**** Doom Moonless Theme
#+begin_src conf
[colors]
background = #cc000000
foreground = #c5c8c6
#+end_src
 
**** Doom-Acario-Light
#+begin_src conf :tangle no
[colors]
background = #FF0000
foreground = #c5c8c6
#+end_src

*** Panel
#+begin_src conf
[bar/panel]
width = 100%
height = 70
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

padding-left = 4
padding-right = 4

module-margin = 1

font-0 = "Noto Sans:size=25:weight=bold"
font-1 = "Material Icons:size=35;5"
font-2 = "Font Awesome:size=35;5"

modules-left = date
modules-center = cpu temperature memory
modules-right = wireless-network pulseaudio backlight redshift battery

tray-position = right
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize
#+end_src

*** CPU Utilization
#+begin_src conf
[module/cpu]
type = internal/cpu
interval = 2
format = CPU <label>
label = %percentage:2%%
#+end_src

*** Date and Time
#+begin_src conf
[module/date]
type = internal/date
interval = 5
date = "%B %d, %Y"
date-alt = "%A %B %d, %Y"
time = %l:%M %p
time-alt = %H:%M:%S

label = %date% %time%
#+end_src

*** Battery
#+begin_src conf
[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%%
format-charging = <animation-charging> <label-charging>
label-discharging = %percentage%%
format-discharging = <ramp-capacity> <label-discharging>

format-full = <ramp-capacity> <label-full>

ramp-capacity-0 = 
ramp-capacity-0-foreground = #FF0000
ramp-capacity-1 = 
ramp-capacity-1-foreground = #FF0000
ramp-capacity-2 = 
ramp-capacity-2-foreground = #BBBB00
ramp-capacity-3 = 
ramp-capacity-3-foreground = #007700
ramp-capacity-4 = 
ramp-capacity-4-foreground = #007700

animation-charging-foreground = #007700
animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750
#+end_src

*** Temperature
#+begin_src conf
[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 70

format = TEMP <label>
format-warn = TEMP <label-warn>

label = %temperature-c%
label-warn = %temperature-c%!
#+end_src

*** Pulse Audio
#+begin_src bash
$INSTALL pulseaudio-control
#+end_src
#+begin_src conf
[module/pulseaudio]
type = custom/script
tail = true
label-padding = 2

exec = pulseaudio-control --icons-volume " , " --icon-muted " " --sink-nicknames-from "device.description" --sink-nickname "alsa_output.pci-0000_00_1f.3.analog-stereo: Built In Speakers" listen
click-right = pavucontrol
click-left = pulseaudio-control togmute
click-middle = pulseaudio-control --sink-blacklist "alsa_output.pci-0000_01_00.1.hdmi-stereo-extra2" next-sink
scroll-up = pulseaudio-control up
scroll-down = pulseaudio-control down
#+end_src

*** Wireless Network
#+begin_src conf
[module/wireless-network]
type = internal/network
interface = wlan0

format-connected =  <label-connected>
format-disconnected = <label-disconnected>
format-packetloss = <animation-packetloss label-connected>

label-connected = %essid%: %downspeed:2%
label-connected-foreground = #eefafafa

label-disconnected = not connected
label-disconnected-foreground = #66ffffff
#+end_src

*** Memory                              
#+begin_src conf
[module/memory]
type = internal/memory
interval = 3
format = <label>
label = MEM %percentage_used:2%%
#+end_src

*** Backlight
**** Give Polybar Access to Change Backlight
#+begin_src bash
sudo makedir -p /etc/udev/rules.d
groupadd -r video
sudo usermod -a -G video $USER
sudo chgrp video /sys/class/backlight/intel_backlight/brightness"
sudo chmod g+w /sys/class/backlight/intel_backlight/brightness
#+end_src

**** Module
#+begin_src conf
[module/backlight]
type = internal/backlight
enable-scroll = true
card = intel_backlight
format = <ramp> <label>
label = %percentage%%
ramp-0 = 
;ramp-0-foreground = #4455bb
ramp-1 = 
;ramp-1-foreground = #888800
#+end_src

*** Redshift
**** Install
#+begin_src bash
mkdir -p $XDG_CONFIG_HOME/polybar/scripts
#+end_src

**** Scripts
***** env.sh
#+begin_src sh :tangle .config/polybar/scripts/env.sh :tangle-mode (identity #o755)
export REDSHIFT=on
export REDSHIFT_TEMP=5600
#+end_src

***** redshift.sh
#+begin_src sh :tangle .config/polybar/scripts/redshift.sh :tangle-mode (identity #o755)
#!/bin/sh

envFile=$XDG_CONFIG_HOME/polybar/scripts/env.sh
changeValue=300

changeMode() {
  sed -i "s/REDSHIFT=$1/REDSHIFT=$2/g" $envFile 
  REDSHIFT=$2
  echo $REDSHIFT
}

changeTemp() {
  if [ "$2" -gt 1000 ] && [ "$2" -lt 25000 ]
  then
    sed -i "s/REDSHIFT_TEMP=$1/REDSHIFT_TEMP=$2/g" $envFile 
    redshift -P -O $((REDSHIFT_TEMP+changeValue))
  fi
}

case $1 in 
  toggle) 
    if [ "$REDSHIFT" = on ];
    then
      changeMode "$REDSHIFT" off
      redshift -x
    else
      changeMode "$REDSHIFT" on
      redshift -O "$REDSHIFT_TEMP"
    fi
    ;;
  increase)
    changeTemp $((REDSHIFT_TEMP)) $((REDSHIFT_TEMP+changeValue))
    ;;
  decrease)
    changeTemp $((REDSHIFT_TEMP)) $((REDSHIFT_TEMP-changeValue));
    ;;
  temperature)
    case $REDSHIFT in
      on)
        printf "%dK" "$REDSHIFT_TEMP"
        ;;
      off)
        printf "off"
        ;;
    esac
    ;;
esac
#+end_src

**** Module
#+begin_src conf
[module/redshift]
type = custom/script
format-prefix = ""
;format-prefix-foreground = #888888
exec = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh temperature
click-left = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh toggle
scroll-up = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh increase
scroll-down = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh decrease
interval=0.5
#+end_src

*** Workspace Indicator
#+begin_src conf
[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-padding = 1
#+end_src
* Display Managers
** Configure X11
#+begin_src bash
echo "Xft.dpi: 200" > ~/.Xresources
#+end_src

** LightDM
*** Install LightDM
#+begin_src bash
$INSTALL lightdm
systemctl enable lightdm
#+end_src

*** Install LightDM Theme
#+begin_src bash
$INSTALL lightdm-webkit2-greeter lightdm-webkit-theme-litarvan
#+end_src

*** LightDM Configuration
#+begin_src conf :tangle /sudo:://etc/lightdm/lightdm.conf
#
# General configuration
#
# start-default-seat = True to always start one seat if none are defined in the configuration
# greeter-user = User to run greeter as
# minimum-display-number = Minimum display number to use for X servers
# minimum-vt = First VT to run displays on
# lock-memory = True to prevent memory from being paged to disk
# user-authority-in-system-dir = True if session authority should be in the system location
# guest-account-script = Script to be run to setup guest account
# logind-check-graphical = True to on start seats that are marked as graphical by logind
# log-directory = Directory to log information to
# run-directory = Directory to put running state in
# cache-directory = Directory to cache to
# sessions-directory = Directory to find sessions
# remote-sessions-directory = Directory to find remote sessions
# greeters-directory = Directory to find greeters
# backup-logs = True to move add a .old suffix to old log files when opening new ones
# dbus-service = True if LightDM provides a D-Bus service to control it
#
[LightDM]
#start-default-seat=true
#greeter-user=lightdm
#minimum-display-number=0
#minimum-vt=7 # Setting this to a value < 7 implies security issues, see FS#46799
#lock-memory=true
#user-authority-in-system-dir=false
#guest-account-script=guest-account
#logind-check-graphical=false
#log-directory=/var/log/lightdm
run-directory=/run/lightdm
#cache-directory=/var/cache/lightdm
#sessions-directory=/usr/share/lightdm/sessions:/usr/share/xsessions:/usr/share/wayland-sessions
#remote-sessions-directory=/usr/share/lightdm/remote-sessions
#greeters-directory=$XDG_DATA_DIRS/lightdm/greeters:$XDG_DATA_DIRS/xgreeters
#backup-logs=true
#dbus-service=true

#
# Seat configuration
#
# Seat configuration is matched against the seat name glob in the section, for example:
# [Seat:*] matches all seats and is applied first.
# [Seat:seat0] matches the seat named "seat0".
# [Seat:seat-thin-client*] matches all seats that have names that start with "seat-thin-client".
#
# type = Seat type (local, xremote)
# pam-service = PAM service to use for login
# pam-autologin-service = PAM service to use for autologin
# pam-greeter-service = PAM service to use for greeters
# xserver-command = X server command to run (can also contain arguments e.g. X -special-option)
# xmir-command = Xmir server command to run (can also contain arguments e.g. Xmir -special-option)
# xserver-config = Config file to pass to X server
# xserver-layout = Layout to pass to X server
# xserver-allow-tcp = True if TCP/IP connections are allowed to this X server
# xserver-share = True if the X server is shared for both greeter and session
# xserver-hostname = Hostname of X server (only for type=xremote)
# xserver-display-number = Display number of X server (only for type=xremote)
# xdmcp-manager = XDMCP manager to connect to (implies xserver-allow-tcp=true)
# xdmcp-port = XDMCP UDP/IP port to communicate on
# xdmcp-key = Authentication key to use for XDM-AUTHENTICATION-1 (stored in keys.conf)
# greeter-session = Session to load for greeter
# greeter-hide-users = True to hide the user list
# greeter-allow-guest = True if the greeter should show a guest login option
# greeter-show-manual-login = True if the greeter should offer a manual login option
# greeter-show-remote-login = True if the greeter should offer a remote login option
# user-session = Session to load for users
# allow-user-switching = True if allowed to switch users
# allow-guest = True if guest login is allowed
# guest-session = Session to load for guests (overrides user-session)
# session-wrapper = Wrapper script to run session with
# greeter-wrapper = Wrapper script to run greeter with
# guest-wrapper = Wrapper script to run guest sessions with
# display-setup-script = Script to run when starting a greeter session (runs as root)
# display-stopped-script = Script to run after stopping the display server (runs as root)
# greeter-setup-script = Script to run when starting a greeter (runs as root)
# session-setup-script = Script to run when starting a user session (runs as root)
# session-cleanup-script = Script to run when quitting a user session (runs as root)
# autologin-guest = True to log in as guest by default
# autologin-user = User to log in with by default (overrides autologin-guest)
# autologin-user-timeout = Number of seconds to wait before loading default user
# autologin-session = Session to load for automatic login (overrides user-session)
# autologin-in-background = True if autologin session should not be immediately activated
# exit-on-failure = True if the daemon should exit if this seat fails
#
[Seat:*]
#type=local
#pam-service=lightdm
#pam-autologin-service=lightdm-autologin
#pam-greeter-service=lightdm-greeter
#xserver-command=X
#xmir-command=Xmir
#xserver-config=
#xserver-layout=
#xserver-allow-tcp=false
#xserver-share=true
#xserver-hostname=
#xserver-display-number=
#xdmcp-manager=
#xdmcp-port=177
#xdmcp-key=
greeter-session=lightdm-webkit2-greeter
#greeter-hide-users=false
#greeter-allow-guest=true
#greeter-show-manual-login=false
#greeter-show-remote-login=true
#user-session=default
#allow-user-switching=true
#allow-guest=true
#guest-session=
session-wrapper=/etc/lightdm/Xsession
#greeter-wrapper=
#guest-wrapper=
#display-setup-script=
#display-stopped-script=
#greeter-setup-script=
#session-setup-script=
#session-cleanup-script=
#autologin-guest=false
#autologin-user=
#autologin-user-timeout=0
#autologin-in-background=false
#autologin-session=
#exit-on-failure=false

#
# XDMCP Server configuration
#
# enabled = True if XDMCP connections should be allowed
# port = UDP/IP port to listen for connections on
# listen-address = Host/address to listen for XDMCP connections (use all addresses if not present)
# key = Authentication key to use for XDM-AUTHENTICATION-1 or blank to not use authentication (stored in keys.conf)
# hostname = Hostname to report to XDMCP clients (defaults to system hostname if unset)
#
# The authentication key is a 56 bit DES key specified in hex as 0xnnnnnnnnnnnnnn.  Alternatively
# it can be a word and the first 7 characters are used as the key.
#
[XDMCPServer]
#enabled=false
#port=177
#listen-address=
#key=
#hostname=

#
# VNC Server configuration
#
# enabled = True if VNC connections should be allowed
# command = Command to run Xvnc server with
# port = TCP/IP port to listen for connections on
# listen-address = Host/address to listen for VNC connections (use all addresses if not present)
# width = Width of display to use
# height = Height of display to use
# depth = Color depth of display to use
#
[VNCServer]
#enabled=false
#command=Xvnc
#port=5900
#listen-address=
#width=1024
#height=768
#depth=8
#+end_src
*** Theme Configuration
#+begin_src conf :tangle /sudo:://etc/lightdm/lightdm-webkit2-greeter.conf
#
# [greeter]
# debug_mode          = Greeter theme debug mode.
# detect_theme_errors = Provide an option to load a fallback theme when theme errors are detected.
# screensaver_timeout = Blank the screen after this many seconds of inactivity.
# secure_mode         = Don't allow themes to make remote http requests.
# time_format         = A moment.js format string so the greeter can generate localized time for display.
# time_language       = Language to use when displaying the time or "auto" to use the system's language.
# webkit_theme        = Webkit theme to use.
#
# NOTE: See moment.js documentation for format string options: http://momentjs.com/docs/#/displaying/format/
#

[greeter]
debug_mode          = false
detect_theme_errors = true
screensaver_timeout = 300
secure_mode         = true
time_format         = LT
time_language       = auto
webkit_theme        = litarvan

#
# [branding]
# background_images = Path to directory that contains background images for use by themes.
# logo              = Path to logo image for use by greeter themes.
# user_image        = Default user image/avatar. This is used by themes for users that have no .face image.
#
# NOTE: Paths must be accessible to the lightdm system user account (so they cannot be anywhere in /home)
#

[branding]
background_images = /usr/share/backgrounds
logo              = /usr/share/pixmaps/archlinux-logo.svg
user_image        = /usr/share/pixmaps/archlinux-user.svg


EOF
#+end_src
* Window Managers
** EXWM
*** Setup
#+begin_src bash
$INSTALL xorg dbus xorg-xrdb xorg-transset wmctrl
sudo mkdir -p /usr/share/xsessions/
sudo tee "/usr/share/xsessions/exwm.desktop" > /dev/null <<'EOF'
[Desktop Entry]
Name=exwm
Type=Application
Icon=exwm
Comment=The Emacs X Window Manager
TryExec=emacs
Exec=emacs -fg --debug-init
EOF

#+end_src

*** Background Image
#+begin_src bash
$INSTALL picom feh
#+end_src

* Notifications
** Libnotify
Libnotify is an implementation of the Desktop Notifications Specification.
#+begin_src bash
$INSTALL libnotify
#+end_src

** Dunst
In order to use libnotify you have to install a notification server. I use Dunst.
#+begin_src bash
$INSTALL dunst
#+end_src

*** Dunst Config
#+begin_src conf :tangle ~/.config/dunst/dunstrc
[global]
    ### Location ###
    follow = keyboard
    origin = top-right
    offset = 20x80

    ### Geometry ###
    #geometry = "0x0-30+100"
    width = 300
    height = 300
    scale = 0         # autodetect if 0
    transparency = 0  # Requires X11 and a compositor [0; 100]

    ### General Settings ###
    notification_limit = 0        # 0 means no limit
    stack_duplicates = true
    hide_duplicate_count = false
    sort = yes                    # Sort by urgency


    ### Progress bar ###
    progress_bar = true
    progress_bar_height = 10 # At least twice as big as frame width
    progress_bar_frame_width = 1
    progress_bar_min_width = 150
    progress_bar_max_width = 300
    
    separator_height = 2 # Distance between notifications

    # Padding between text and separator.
    padding = 8
    horizontal_padding = 8
    text_icon_padding = 0

    ### Frame around notification window ###
    frame_width = 0
    frame_color = "#aaaaaa" # Color 
    separator_color = frame # auto, foreground, frame, <any color>

    ### Text ###
    font = Monospace 10
    line_height = 0
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"
    alignment = left
    vertical_alignment = center

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    ignore_newline = no # Ignore newlines '\n' in notifications.
    show_indicators = yes # indicators for URLs (U) and actions (A)

    ### Icons ###
    icon_position = left # left/right/off
    min_icon_size = 0
    max_icon_size = 32
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### History ###
    sticky_history = yes
    history_length = 20

    ### Misc/Advanced ###
    dmenu = /usr/bin/dmenu -p dunst:
    browser = /usr/bin/xdg-open
    always_run_script = true

    ### Windows Spawned by Dunst ###
    title = Dunst
    class = Dunst
    corner_radius = 5

    ignore_dbusclose = false

    ### Mouse ###
    mouse_left_click = do_action
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all

[experimental]
    per_monitor_dpi = false

[urgency_low]
    background = "#222222"
    foreground = "#888888"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_normal]
    background = "#285577"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon
#+end_src

* Virtualization
** Notes
[[https://wiki.archlinux.org/title/libvirt]]
[[https://serverfault.com/questions/208693/difference-between-kvm-and-qemu]]
*** Basics
- *KVM* stands for *Kernel-Based Virtual Machine*.
- *Libvirt* provides a daemon and client to manipulate VMs for convenience
- *QEMU* is the hypervisor. QEMU also includes a long list of peripheral emulators
- *KQEMU* is a kernel module based off of QEMu that has optimizations for converting between a physical and virtual CPU of the same architecture (It can't just directly pass the code to the physical CPU, as it needs to replace privileged instructions with context switches). This served as a software-only "accelerator" and was made obsolete by KVM.
- A *guest domain* is the same as a *virtual machine* when talking about OS Virtualization. You will see this term be brought up in ~virsh~ documentation
- A *pool* is a location where storage volumes can be kept. *Volumes* are another name for *virtual disks* or *virtual machine images*. Pool locations can be a directory, network filesystem, or partition.
- On the system-level, ~/var/lib/libvirt/images/~ will be activated by default. On a user session, ~virt-manager~ creates ~$HOME/VirtualMachines~
- ~virsh~ and ~virt-manager~ can be used to manage pools, volumes, and domains
- ~virt-install~ and ~virt-manager~ can be used to create new domains
- ~virsh~ can be used to start, shutdown, destory (forceful shutdown), and autostart domains
- ~virsh~ can also be used to quickly edit a domain's XML configuration
*** Libvirt Networking
- Four network types that can be created to connect a domain to:
  1. *Bridge*: A virtual device. Shares data directly with a physical device
  2. *Network*: A virtual network. Can share with other domains. Libvirt offers manyy virtual network modes, such as NAT mode, routed mode, and isolated mode.
  3. *Macvtap*: Connect directly to a host physical interface
  4. *User*: Local ability networking. use this only for a user-session
- Libvirt handles DHCP and DNS with ~dnsmasq~, launching a separate instance for every virtual network. It also adds ~iptables~ rules for proper routing. Running ~dnsmasq~ on the host sytem could interfere with libvirts version.
*** KVM vs QEMU Notes
[[https://cloudbuilder.in/blogs/2014/03/09/kvm-and-qemu/]]
- Modern processors support *virtualization extensions*. Intel uses VT-x and AMD uses AMD-V. These technologies directly map physical CPU instructions to virtual CPU instructions.
- KVM is a kernel module that adds VT-x and AMD-V support.
- QEMU can be configured to either use KVM for hardware acceleration, otherwise it will use TCG (Tiny Code Generate) to translate instructions
- QEMU is a type-2 hypervisor but when paired with KVM it can act as a type-1 hypervisor
*** 9P Protocol
File system directories can be shared using the 9P protocol. See [[https://wiki.archlinux.org/title/libvirt#9p]] for more information.

** Setup Virtualization
#+begin_src bash
$INSTALL libvert qemu

# Network Connectivity with Virtual Machine #
$INSTALL iptables-nft \  # NAT/DHCP Netowrking (iptables!=iptables-nft)
         dnsmasq \       # NAT/DHCP Netowrking
         bridge-utils \  # Bridged Networking
         openbsd-netcat  # Remote Management over SSH

# Client Software #
$INSTALL virsh \         # Managing and configuring domains
         virt-manager    # Graphically manage KVM, Xen or LXC

# Other Software #
$INSTALL libguestfs \  # Access and modify virtual machine disk images
         edk2-ovmf \   # UEFI Emulation
         swtpm         # TPM Emulation
         
# Members of the libvirt group have passwordless access to the RW daemon socket by default.
sudo usermod -aG libvirt ${whoami}
sudo usermod -aG kvm ${whoami}

sudo systemctl enable libvirtd # Also enables virtlogd and virtlockd
sudo systemctl start virtlogd
sudo systemctl start libvirtd

# Make sure to set user = /etc/libvirt/qemu.conf
#+end_src

** Wine
#+begin_src bash
$INSTALL wine wine-mono wine-gecko
#+end_src

** OSX Machine
To create an OSX Virtual Machine check out the ~OSX-KVM~ project and follow the instructions in their git repository.

* Useful Applications
** Firefox
#+begin_src bash
$INSTALL firefox
#+end_src

** Bitwarden
#+begin_src bash
$INSTALL bitwarden bitwarden-cli
#+end_src

** Spotify
#+begin_src bash
$INSTALL spotify
#+end_src

** Discord
#+begin_src bash
$INSTALL discord
#+end_src

** Git-Annex
#+begin_src bash
$INSTALL git-annex
#+end_src

** Redshift
#+begin_src bash
$INSTALL redshift
#+end_src

** OBS Studio
#+begin_src bash
$INSTALL obs-studio
#+end_src

** Podman
#+begin_src bash
$INSTALL podman
echo "unqualified-search-registries = ['docker.io']" \
    | sudo tee /etc/containers/registries.conf
#+end_src

** Setup Neovim
#+begin_src bash
$INSTALL neovim
mkdir -p $XDG_CONFIG_HOME/nvim
curl -fLo $XDG_DATA_HOME/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
cat <<EOT > $XDG_CONFIG_HOME/nvim/init.vim
call plug#begin('$XDG_CONFIG_HOME/nvim/plugged')
Plug 'jacoborus/tender.vim'
Plug 'LnL7/vim-nix'
Plug 'rust-lang/rust.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
call plug#end()

set number relativenumber       " set line-numbers to be relative
set nohlsearch                  " no highlight search
set mouse=a                     " recognize and enable mouse
set tabstop=4                   " show existing tab as 4 spaces
set shiftwidth=4                " use 4 spaces when indenting with '>'
set expandtab                   " on pressing tab, insert 4 spaces
set termguicolors               " use terminal colors
let g:airline_powerlin_fonts=1  " set airline theme
colorscheme tender              " change the colorscheme
let g:airline_theme = 'tender'  " change airline colorscheme

EOT
cat <<EOT >> $ZDOTDIR/.zshrc
# neovim config
alias vi=nvim
alias vim=nvim
export EDITOR=nvim
export VISUAL=nvim

EOT
#+end_src

* Change Shell
#+begin_src bash
sudo chsh -s /usr/bin/zsh $(whoami)
#+end_src
