#+title: Guide to Setup Development Environment
#+PROPERTY: header-args :results none :mkdirp yes
* Configuration Files
** Grub
#+begin_src conf :tangle /sudo:://etc/default/grub
GRUB_DEFAULT=saved
GRUB_SAVEDEFAULT=true
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="Arch"
GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet"
GRUB_CMDLINE_LINUX="resume=/dev/nvme0n1p2"
GRUB_DISABLE_OS_PROBER=false
GRUB_THEME="/boot/grub/themes/vimix/theme.txt"
GRUB_PRELOAD_MODULES="part_gpt part_msdos"
GRUB_TIMEOUT_STYLE=menu
GRUB_TERMINAL_INPUT=console
GRUB_GFXMODE=auto
GRUB_GFXPAYLOAD_LINUX=keep
GRUB_DISABLE_RECOVERY=true
#+end_src

** Logind
#+begin_src conf :tangle /sudo:://etc/systemd/logind.conf
[Login]
HandlePowerKey=hibernate
HandleSuspendKey=hibernate
HandleHibernateKey=hibernate
#HandleLidSwitch=suspend
#+end_src

** XDG Defaults
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/mimeapps.list")
:END:
See https://www.freeformatter.com/mime-types-list.html for a list of schema.
#+begin_src conf
[Default Applications]
x-scheme-handler/http=org.qutebrowser.qutebrowser.desktop
x-scheme-handler/https=org.qutebrowser.qutebrowser.desktop
application/pdf=org.qutebrowser.qutebrowser.desktop
#+end_src

** ZSH Config
:PROPERTIES:
:header-args:bash: :tangle ~/.zshrc
:END:
*** General
#+begin_src bash
unsetopt BEEP
setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
unsetopt HIST_EXPIRE_DUPS_FIRST
unsetopt EXTENDED_HISTORY
HISTSIZE="10000"
SAVEHIST="10000"
HISTFILE="$XDG_STATE_HOME/zsh/history"
mkdir -p "$(dirname "$HISTFILE")"
#+end_src

*** Theme
#+begin_src bash
fpath+="$XDG_CONFIG_HOME"/zsh/pure
autoload -U promptinit; promptinit
zstyle :prompt:pure:prompt:success color green
zstyle :prompt:pure:prompt:error color red
zstyle :prompt:pure:prompt:continuation color white
zstyle :prompt:pure:virtualenv color white
zstyle :prompt:pure:execution_time color white
zstyle :prompt:pure:git:stash show yes
zstyle :prompt:pure:git:stash color white
zstyle :prompt:pure:git:arrow color white
zstyle :prompt:pure:git:action color white
zstyle :prompt:pure:git:dirty color white
zstyle :prompt:pure:git:branch color white
zstyle :prompt:pure:git:branch:cached color red
zstyle :prompt:pure:path color white
zstyle :prompt:pure:host color white
zstyle :prompt:pure:user color white
zstyle :prompt:pure:user:root color magenta
prompt pure
#+end_src

*** Neovim
#+begin_src bash
alias vi=nvim
alias vim=nvim
export EDITOR=nvim
export VISUAL=nvim
#+end_src

*** Audio
#+begin_src bash
playerctld daemon
#+end_src

*** Emacs
#+begin_src bash
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] \
       || [ "${TERM%%-*}" = "screen" ] ); then
        printf "\ePtmux;\e\e]%s\007\e\\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        printf "\eP\e]%s\007\e\\\" "$1"
    else
        printf "\e]%s\e\\\" "$1"
    fi
}
#+end_src

*** Ntangle
#+begin_src bash
alias ntangle=~/.nimble/bin/ntangle
#+end_src

* Script
:PROPERTIES:
:header-args:bash: :tangle ./scripts/setup.sh
:END:
** Script Headers
*** Use Bash
#+begin_src bash
#!/bin/bash
#+end_src

*** Stop Script on Error
#+begin_src bash
set -e
#+end_src

*** Give Verbose Output
#+begin_src bash
set -v
#+end_src

*** Warning
#+begin_src bash
# NOTE: This file is generated from setup.org
#+end_src

** Make sure OS is supported
#+begin_src bash
export DISTRO=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
if ! [ "$DISTRO" = "\"Arch Linux\"" ] \
    && ! [ "$DISTRO" = "\"Arch Linux ARM\"" ]; then echo "Unsupported Platform"
    echo "Currently only Arch Linux is supported"
    return 1
fi
#+end_src

** Get Full Path to Script
#+begin_src bash
DIR=$(realpath $(dirname $0))
#+end_src

** Setup XDG Base Directories
#+begin_src bash
source $HOME/.profile
#+end_src

*** Make Directories
#+begin_src bash
mkdir -p $XDG_CONFIG_HOME
mkdir -p $XDG_CACHE_HOME
mkdir -p $XDG_DATA_HOME
mkdir -p $XDG_STATE_HOME
mkdir -p $REPOSITORIES
#+end_src

** Setup Yay
*** Install
#+begin_src bash
if ! (pacman -Qs yay > /dev/null); then
    if (pacman -Qs fakeroot-tcp > /dev/null); then
        sudo pacman -Syyu --needed git base-devel \ && git clone https://aur.archlinux.org/yay.git $REPOSITORIES/yay \ && cd $REPOSITORIES/yay && yes | makepkg -si
    else # cannot use --noconfirm if fakeroot-tcp is installed
        sudo pacman -Syyu --needed --noconfirm git base-devel \
            && git clone https://aur.archlinux.org/yay.git \
            && cd yay && yes | makepkg -si
    fi
    rm -rf $REPOSITORIES/yay
fi
#+end_src

*** Shortcuts
#+begin_src bash
export INSTALL="yay -S --noconfirm --needed"
export INSTALL_LOCAL="yay -U --noconfirm --needed"
export REMOVE="yay -R --noconfirm --needed"
export UPDATE="yay -Syyu --noconfirm --needed"
export SEARCH="yay -Qs"
#+end_src

*** Update Packages
#+begin_src bash
$UPDATE
#+end_src

** Fundamental Packages
*** git
#+begin_src bash
$INSTALL git openssh
mkdir -p "$XDG_CONFIG_HOME"/git
touch "$XDG_CONFIG_HOME"/git/config
git config --global user.name "Matt Glen"
git config --global user.email "mwg2202@yahoo.com"
git config --global init.defaultBranch master
#+end_src

*** man
#+begin_src bash
$INSTALL man-db man-pages
#+end_src

*** cmake
#+begin_src bash
$INSTALL cmake
#+end_src

*** rsync
#+begin_src bash
$INSTALL rsync
#+end_src

*** wget
#+begin_src bash
$INSTALL wget
echo hsts-file \= "$XDG_CACHE_HOME"/wget-hsts >> "$XDG_CONFIG_HOME/wgetrc"
#+end_src

*** Inetutils
Gives the hostname command
#+begin_src bash
$INSTALL inetutils
#+end_src

*** Python
#+begin_src bash
$INSTALL python
#+end_src

** Terminal Emulators
*** Alacritty
**** Install
#+begin_src bash
$INSTALL alacritty
#+end_src

**** Configure
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/alacritty/alacritty.yml")
:END:
#+begin_src conf
#+end_src

** Drivers
*** NVIDIA
#+begin_src bash
$INSTALL nvidia
#+end_src

*** USB
#+begin_src bash
$INSTALL usbutils usbip
#+end_src

*** Bluetooth
#+begin_src bash
$INSTALL bluez bluez-utils pulseaudio-bluetooth
sudo systemctl enable bluetooth
#+end_src

**** Configuration
#+begin_src conf :tangle /sudo:://etc/bluetooth/main.conf
[General]

[BR]

[LE]

[GATT]

[AVDTP]

[Policy]
AutoEnable=false

[AdvMon]
#+end_src

*** Wifi
#+begin_src bash
$INSTALL networkmanager network-manager-applet
sudo systemctl enable NetworkManager
#+end_src

*** Audio
**** Install
#+begin_src bash
$INSTALL alsa-utils pavucontrol
#+end_src

**** Set XF86 Keys
#+begin_src conf :tangle ~/.xbindkeysrc
### Audio Control ###
"pactl set-sink-volume @DEFAULT_SINK@ +10%"
    XF86AudioRaiseVolume
"pactl set-sink-volume @DEFAULT_SINK@ -10%"
    XF86AudioLowerVolume
"pactl set-sink-mute @DEFAULT_SINK@ toggle"
    XF86AudioMute
"pactl set-source-mute @DEFAULT_SOURCE@ toggle"
    XF86AudioMicMute
#+end_src

*** Media
**** Install
#+begin_src bash
$INSTALL playerctl mpv youtube-dl baka-mplayer
#+end_src

**** Set XF86 Keys
#+begin_src conf :tangle ~/.xbindkeysrc
### Media Control ###
"playerctl previous"
    XF86AudioPrev
"playerctl next"
    XF86AudioNext
"playerctl play-pause"
    XF86AudioPlay
"playerctl stop"
    XF86AudioStop
#+end_src

*** Brightness
**** Setup Video Group
#+begin_src bash
sudo groupadd video && true
sudo usermod +aG video mwglen && true
sudo chgrp video /sys/class/backlight/intel_backlight/brightness && true
#+end_src

#+begin_src conf :tangle /sudo:://etc/udev/rules.d/backlight.rules
ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<vendor>", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<vendor>", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
#+end_src

**** Brightnessctl
***** Install
#+begin_src bash
$INSTALL brightnessctl
#+end_src

***** Set XF86 Keys
#+begin_src conf :tangle no
### +begin_src conf :tangle ~/.xbindkeysrc
### Brightness Control ###
"brightnessctl set 10%+"
    XF86MonBrightnessUp
"brightnessctl set 10%-"
    XF86MonBrightnessDown
#+end_src

**** Brillo
***** Install
#+begin_src bash
git clone https://github.com/CameronNemo/brillo $REPOSITORIES/brillo && true
cd $REPOSITORIES/brillo && sudo make install
#+end_src

***** Set XF86 Keys
#+begin_src conf :tangle ~/.xbindkeysrc
### Brightness Control ###
"brillo -q -u 150000 -A 5"
    XF86MonBrightnessUp
"brillo -q -u 150000 -U 5"
    XF86MonBrightnessDown
#+end_src

*** Printing/Scanning
**** Base Drivers
To scan I recommend using simple-scan
#+begin_src bash
$INSTALL cups sane python-pillow simple-scan
sudo systemctl enable cups
#+end_src

**** Optional Drivers for HP Printers
Runs using cups and sane. Comes with a systemtray available through the ~hp-systray~ command. To get started find the ip address of your printer and then run ~hp-setup <ip-address>~.
#+begin_src bash
$INSTALL hplip
#+end_src

** Setup Core Packages
*** Latex
#+begin_src bash
$INSTALL texlive-core texlive-latexextra
#+end_src

*** ZSH
**** Install
#+begin_src bash
$INSTALL zsh
#+end_src

**** Source Config
#+begin_src bash
source $HOME/.zshenv
#+end_src

**** Dot Profile
#+begin_src bash :tangle ~/.profile
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share
export XDG_STATE_HOME=$HOME/.local/state
export BACKGROUNDS=$HOME/backgrounds
export REPOSITORIES=$HOME/repositories
#+end_src

**** Environment Config
:PROPERTIES:
:header-args:bash: :tangle ~/.zshenv
:END:
#+begin_src bash
source $HOME/.profile
alias ls="ls --color=auto -h"
alias grep="grep --color=auto"
alias ip="ip -color=auto"
alias spotify="spotify --force-device-scale-factor=2"
#+end_src

**** Pure (ZSH Theme)
#+begin_src bash
if (mkdir "$XDG_CONFIG_HOME"/zsh/pure); then
    git clone https://github.com/sindresorhus/pure.git "$XDG_CONFIG_HOME"/zsh/pure && true
fi
#+end_src

** Xmodmap
*** Install
#+begin_src bash
$INSTALL xorg-xmodmap
#+end_src

*** Configuration
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/xmodmap/config")
:END:
Moves caps lock to right control and left control to caps lock
#+begin_src conf
clear lock
clear control
keycode 66 = Control_L NoSymbol Control_L
add control = Control_L
add lock = Control_R
#+end_src

** Power Saving Mode using TLP
1. Run the following commands to start using TLP:
   
   #+begin_src bash
   $INSTALL tlp
   sudo systemctl enable tlp
   #+end_src

** File System Support
*** exFAT Support
#+begin_src bash
$INSTALL exfatprogs
#+end_src

*** NTFS Support
#+begin_src bash
$INSTALL ntfs-3g
#+end_src

*** VHD and VHDX Support
#+begin_src bash
$INSTALL libguestfs
#+end_src

** Syncing Emails to a Local Directory
*** Install Isync
*NOTE*: ~isync~ gives us the ~mbsync~ utility
#+begin_src bash
$INSTALL isync
#+end_src

*** Configure Mbsync
*NOTE*: Different distributions of linux might place the certificate file at a different location.
:PROPERTIES:
:header-args:conf: :tangle ~/.mbsyncrc
:END:
#+begin_src conf
IMAPAccount gmail
Host imap.gmail.com
User mwg2202@gmail.com
PassCmd ""
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Subfolders Verbatim
Path ~/personal-documents/Mail/
Inbox ~/personal-documents/Mail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
Create Both
SyncState *
#+end_src

*** Create a Local Folder to Hold Emails
#+begin_src bash
mkdir -p ~/personal-documents/Mail
#+end_src

*** Run Mbsync
#+begin_src bash :tangle no
mbsync -a
#+end_src

** Converting ICS format to Org
See [[https://tero.hasu.is/blog/org-icalendar-import/]] for more information.
*** Install
#+begin_src bash
$INSTALL ruby
gem install date icalendar optparse tzinfo

git clone https://tero.hasu.is/repos/icalendar-to-org.git $REPOSITORIES/icalendar-to-org && true
#+end_src

***  To Use
#+begin_src bash :tangle no
ics-to-org input.ics > output.org
#+end_src

** Setup a Software Access Point
*** Linux-Wifi-Hotspot
~linux-wifi-hotspot~ is an AUR package that allows you to easily create a wifi-hotspot without needing to mess around with ~hostapd~, ~dnsmasq~, and ~iptables~. It includes both a gui and cli interface.
#+begin_src bash
$INSTALL linux-wifi-hotspot
#+end_src

**** Use CLI
#+begin_src bash :tangle no
create_ap wlan0 eth0 MyAccessPoint MyPassPhrase
#+end_src

**** Use GUI
#+begin_src bash :tangle no
wihotspot
#+end_src

** Polybar Panel
*** Install Polybar
#+begin_src bash
$INSTALL polybar
#+end_src

**** Configuration
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/config")
:END:
***** Global Settings
#+begin_src conf
[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0
#+end_src

***** Themes
****** Doom Tomorrow Night Theme
#+begin_src conf :tangle no
[colors]
background = #1d1f21
foreground = #c5c8c6
#+end_src

****** Doom Moonless Theme
#+begin_src conf
[colors]
background = #000000
foreground = #c5c8c6
#+end_src
 
****** Doom-Acario-Light
#+begin_src conf :tangle no
[colors]
background = #FF0000
foreground = #c5c8c6
#+end_src

***** Panel
#+begin_src conf
[bar/panel]
width = 100%
height = 70
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true
border-color = #c5c8c6
border-bottom-size = 0
             
background = ${colors.background}
foreground = ${colors.foreground}

padding-left = 2
padding-right = 2

module-margin = 1

font-0 = "Noto Sans:size=25:weight=bold"
font-1 = "Material Icons:size=35;5"
font-2 = "Font Awesome:size=35;5"

modules-left = date
;modules-center = cpu temperature memory
modules-right = wireless-network pulseaudio backlight redshift battery

tray-position = right
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize
#+end_src

***** CPU Utilization
#+begin_src conf
[module/cpu]
type = internal/cpu
interval = 2
format = CPU <label>
label = %percentage:2%%
#+end_src

***** Date and Time
#+begin_src conf
[module/date]
type = internal/date
interval = 5
date = "%B %d, %Y"
date-alt = "%A %B %d, %Y"
time = %l:%M %p
time-alt = %H:%M:%S

label = %date% %time%
#+end_src

***** Battery
#+begin_src conf
[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%%
format-charging = <animation-charging> <label-charging>
label-discharging = %percentage%%
format-discharging = <ramp-capacity> <label-discharging>

format-full = <ramp-capacity> <label-full>

ramp-capacity-0 = 
ramp-capacity-0-foreground = #FF0000
ramp-capacity-1 = 
ramp-capacity-1-foreground = #FF0000
ramp-capacity-2 = 
ramp-capacity-2-foreground = #BBBB00
ramp-capacity-3 = 
ramp-capacity-3-foreground = #007700
ramp-capacity-4 = 
ramp-capacity-4-foreground = #007700

animation-charging-foreground = #007700
animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750
#+end_src

***** Temperature
#+begin_src conf
[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 70

format = TEMP <label>
format-warn = TEMP <label-warn>

label = %temperature-c%
label-warn = %temperature-c%!
#+end_src

***** Pulse Audio
#+begin_src bash
$INSTALL pulseaudio-control
#+end_src
#+begin_src conf
[module/pulseaudio]
type = custom/script
tail = true
label-padding = 2

exec = pulseaudio-control --icons-volume " , " --icon-muted " " --sink-nicknames-from "device.description" --sink-nickname "alsa_output.pci-0000_00_1f.3.analog-stereo: Built In Speakers" listen
click-right = pavucontrol
click-left = pulseaudio-control togmute
click-middle = pulseaudio-control --sink-blacklist "alsa_output.pci-0000_01_00.1.hdmi-stereo-extra2" next-sink
scroll-up = pulseaudio-control up
scroll-down = pulseaudio-control down
#+end_src

***** Wireless Network
#+begin_src conf
[module/wireless-network]
type = internal/network
interface = wlan0

format-connected =  <label-connected>
format-disconnected = <label-disconnected>
format-packetloss = <animation-packetloss label-connected>

label-connected = %essid%
label-connected-foreground = #eefafafa

label-disconnected = not connected
label-disconnected-foreground = #66ffffff
#+end_src

***** Memory                              
#+begin_src conf
[module/memory]
type = internal/memory
interval = 3
format = <label>
label = MEM %percentage_used:2%%
#+end_src

***** Backlight
****** Give Polybar Access to Change Backlight
#+begin_src bash
sudo mkdir -p /etc/udev/rules.d
groupadd -r video && true
sudo usermod -a -G video $USER
sudo chgrp video /sys/class/backlight/intel_backlight/brightness
sudo chmod g+w /sys/class/backlight/intel_backlight/brightness
#+end_src

****** Module
#+begin_src conf
[module/backlight]
type = internal/backlight
enable-scroll = true
card = intel_backlight
format = <ramp> <label>
label = %percentage%%
ramp-0 = 
;ramp-0-foreground = #4455bb
ramp-1 = 
;ramp-1-foreground = #888800
#+end_src

***** Redshift
****** Scripts
******* env.sh
:PROPERTIES:
:header-args:sh: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/scripts/env.sh") :tangle-mode (identity #o755)
:END:
#+begin_src sh
export REDSHIFT=on
export REDSHIFT_TEMP=5600
#+end_src

******* redshift.sh
:PROPERTIES:
:header-args:sh: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/scripts/redshift.sh") :tangle-mode (identity #o755)
:END:
#+begin_src sh
#!/bin/sh

envFile=$XDG_CONFIG_HOME/polybar/scripts/env.sh
changeValue=300

changeMode() {
  sed -i "s/REDSHIFT=$1/REDSHIFT=$2/g" $envFile 
  REDSHIFT=$2
  echo $REDSHIFT
}

changeTemp() {
  if [ "$2" -gt 1000 ] && [ "$2" -lt 25000 ]
  then
    sed -i "s/REDSHIFT_TEMP=$1/REDSHIFT_TEMP=$2/g" $envFile 
    redshift -P -O $((REDSHIFT_TEMP+changeValue))
  fi
}

case $1 in 
  toggle) 
    if [ "$REDSHIFT" = on ];
    then
      changeMode "$REDSHIFT" off
      redshift -x
    else
      changeMode "$REDSHIFT" on
      redshift -O "$REDSHIFT_TEMP"
    fi
    ;;
  increase)
    changeTemp $((REDSHIFT_TEMP)) $((REDSHIFT_TEMP+changeValue))
    ;;
  decrease)
    changeTemp $((REDSHIFT_TEMP)) $((REDSHIFT_TEMP-changeValue));
    ;;
  temperature)
    case $REDSHIFT in
      on)
        printf "%dK" "$REDSHIFT_TEMP"
        ;;
      off)
        printf "off"
        ;;
    esac
    ;;
esac
#+end_src

****** Module
#+begin_src conf
[module/redshift]
type = custom/script
format-prefix = ""
;format-prefix-foreground = #888888
exec = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh temperature
click-left = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh toggle
scroll-up = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh increase
scroll-down = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh decrease
interval=0.5
#+end_src

***** Workspace Indicator
#+begin_src conf
[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-padding = 1
#+end_src

** GTK Theme
*** Install Theme
#+begin_src bash
$INSTALL materia-gtk-theme
#+end_src

*** Configure GTK 3.0
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/gtk-3.0/settings.ini")
:END:
#+begin_src conf
[Settings]
gtk-icon-theme-name = Materia
gtk-theme-name = Materia
gtk-application-prefer-dark-theme = true
#+end_src

*** Configure GTK 2.0
:PROPERTIES:
:header-args:conf: :tangle ~/.gtkrc-2.0
:END:
#+begin_src conf
[Settings]
gtk-icon-theme-name = "Materia"
gtk-theme-name = "Materia"
gtk-application-prefer-dark-theme = "true"
#+end_src

** Display Managers
*** Configure X11
#+begin_src bash
echo "Xft.dpi: 200" > ~/.Xresources
#+end_src

*** LightDM
**** Install LightDM
#+begin_src bash
$INSTALL lightdm
sudo systemctl enable lightdm
#+end_src

**** Install LightDM Theme
#+begin_src bash
$INSTALL lightdm-webkit-theme-litarvan
#+end_src

**** Configure LightDM
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/lightdm/lightdm.conf
:END:
#+begin_src conf
[LightDM]
run-directory=/run/lightdm

[Seat:*]
greeter-session=lightdm-webkit2-greeter
session-wrapper=/etc/lightdm/Xsession

[XDMCPServer]
[VNCServer]
#+end_src

**** Configure LightDM Greeter
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/lightdm/lightdm-webkit2-greeter.conf
:END:
#+begin_src conf
[greeter]
debug_mode          = false
detect_theme_errors = true
screensaver_timeout = 300
secure_mode         = true
time_format         = LT
time_language       = auto
webkit_theme        = litarvan

[branding]
background_images = /usr/share/backgrounds
logo              = /usr/share/pixmaps/archlinux-logo.svg
user_image        = /usr/share/pixmaps/archlinux-user.svg
#+end_src


** Compositors
*** Picom
**** Install
#+begin_src bash
$INSTALL picom-ibhagwan-git
#+end_src

**** Configuration
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/picom.conf")
:END:
#+begin_src conf
#corner-radius = 50; # obviously doesn't work with EXWM, but useful
#################################
#             Shadows           #
#################################
shadow = true;
shadow-radius = 7;
# shadow-opacity = .75
shadow-offset-x = -7;
shadow-offset-y = -7;
# no-dock-shadow = false
# no-dnd-shadow = false

# Color valus of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0
# shadow-green = 0
# shadow-blue = 0

shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#           Fading              #
#################################
fading = true
fade-in-step = 0.03;
fade-out-step = 0.03;

#################################
#   Transparency / Opacity      #
#################################
inactive-opacity = 0.8;
frame-opacity = 0.7;
inactive-opacity-override = false;
focus-exclude = [ "class_g = 'Cairo-clock'" ];
opacity-rule = [
  "100:fullscreen", "80:!fullscreen",
];

#################################
#     Background-Blurring       #
#################################
blur-method = "dual_kawase";
blur-strength = 5;
blur-background-exclude = [
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#       General Settings        #
#################################
backend = "glx";
vsync = true
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 0
detect-transient = true
detect-client-leader = true
glx-no-stencil = true;
glx-no-rebind-pixmap = true;
use-damage = true
log-level = "warn";
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
#+end_src

** Xorg
*** Install
#+begin_src bash
$INSTALL xorg dbus xorg-xrdb xorg-transset wmctrl
#+end_src

**** Xsession File
#+begin_src bash :tangle ~/.xprofile
xrandr --dpi 200 --output eDP-1 --primary --mode 3840x2160 --pos 0x0 --rotate normal --output DP-1 --off --output HDMI-1 --off
picom &
feh --bg-scale $BACKGROUNDS/unit-01.jpg
xbindkeys
xmodmap $XDG_CONFIG_HOME/xmodmap/config
export QT_AUTO_SCREEN_SCALE_FACTOR=1
#+end_src


** XBindKeys
#+begin_src bash
$INSTALL xbindkeys
#+end_src

** Window Managers
*** EXWM
**** Desktop Entry
#+begin_src conf :tangle /sudo:://usr/share/xsessions/exwm.desktop
[Desktop Entry]
Name=exwm
Type=Application
Icon=exwm
Comment=The Emacs X Window Manager
TryExec=emacs
Exec=emacs -fs
#+end_src

**** Download Packages not on Melpa
***** EXWM Outer Gaps
***** Ivy Clipmenu
#+begin_src bash
cd ~/.config/emacs/lisp && wget https://raw.githubusercontent.com/mwglen/ivy-clipmenu.el/master/ivy-clipmenu.el
#+end_src

*** XMonad
**** Install
#+begin_src bash
$INSTALL xmonad xmonad-contrib
#+end_src

**** Configuration
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
-- IMPORTS
import XMonad
import XMonad.Util.SpawnOnce
import XMonad.Util.Run(spawnPipe)

-- Import For Dock
import XMonad.Hooks.ManageDocks
import qualified Codec.Binary.UTF8.String as UTF8

-- EXMH Support
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops

-- DBUS (needed for polybar integration with xmonad)
import qualified DBus as D

import Data.Monoid
import System.Exit

import XMonad.Layout.Spacing
import XMonad.Layout.NoBorders

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

myTerminal      = "emacsclient -c -a --eval vterm"

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = False

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = True

myBorderWidth   = 2
myModMask       = mod4Mask

-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]

-- Border colors for unfocused and focused windows, respectively.
myNormalBorderColor  = "#dddddd"
myFocusedBorderColor = "#ff0000"

myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)

    -- launch dmenu
    , ((modm,               xK_p     ), spawn "rofi -show run")

    -- launch gmrun
    , ((modm .|. shiftMask, xK_p     ), spawn "gmrun")

    -- close focused window
    , ((modm .|. shiftMask, xK_c     ), kill)

     -- Rotate through the available layout algorithms
    , ((modm,               xK_space ), sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)

    -- Move focus to the next window
    , ((modm,               xK_Tab   ), windows W.focusDown)

    -- Move focus to the next window
    , ((modm,               xK_j     ), windows W.focusDown)

    -- Move focus to the previous window
    , ((modm,               xK_k     ), windows W.focusUp  )

    -- Move focus to the master window
    , ((modm,               xK_m     ), windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ((modm,               xK_Return), windows W.swapMaster)

    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

    -- Shrink the master area
    , ((modm,               xK_h     ), sendMessage Shrink)

    -- Expand the master area
    , ((modm,               xK_l     ), sendMessage Expand)

    -- Push window back into tiling
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

    -- Quit xmonad
    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))

    -- Restart xmonad
    , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")

    -- Run xmessage with a summary of the default keybindings (useful for beginners)
    , ((modm .|. shiftMask, xK_slash ), spawn ("echo \"" ++ help ++ "\" | xmessage -file -"))
    ]
    ++

    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

myLayout = avoidStruts (tiled ||| Mirror tiled ||| Full)
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = Tall nmaster delta ratio

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 1/2

     -- Percent of screen to increment by when resizing panes
     delta   = 3/100

myManageHook = composeAll
    [ isFullscreen                  --> doFullFloat
    , className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ]

------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook = ewmhDesktopsEventHook

myLogHook = return ()
myStartupHook = do
    spawnOnce "emacs --daemon"

main :: IO ()
main = do
    -- Start xmonad
    xmonad $ ewmh . docks $ defaults

defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = spacingWithEdge 30 $ myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }

-- | Finally, a copy of the default bindings in simple textual tabular format.
help :: String
help = unlines ["The default modifier key is 'alt'. Default keybindings:",
    "",
    "-- launching and killing programs",
    "mod-Shift-Enter  Launch alacritty",
    "mod-p            Launch rufi",
    "mod-Shift-p      Launch gmrun",
    "mod-Shift-c      Close/kill the focused window",
    "mod-Space        Rotate through the available layout algorithms",
    "mod-Shift-Space  Reset the layouts on the current workSpace to default",
    "mod-n            Resize/refresh viewed windows to the correct size",
    "",
    "-- move focus up or down the window stack",
    "mod-Tab        Move focus to the next window",
    "mod-Shift-Tab  Move focus to the previous window",
    "mod-j          Move focus to the next window",
    "mod-k          Move focus to the previous window",
    "mod-m          Move focus to the master window",
    "",
    "-- modifying the window order",
    "mod-Return   Swap the focused window and the master window",
    "mod-Shift-j  Swap the focused window with the next window",
    "mod-Shift-k  Swap the focused window with the previous window",
    "",
    "-- resizing the master/slave ratio",
    "mod-h  Shrink the master area",
    "mod-l  Expand the master area",
    "",
    "-- floating layer support",
    "mod-t  Push window back into tiling; unfloat and re-tile it",
    "",
    "-- increase or decrease number of windows in the master area",
    "mod-comma  (mod-,)   Increment the number of windows in the master area",
    "mod-period (mod-.)   Deincrement the number of windows in the master area",
    "",
    "-- quit, or restart",
    "mod-Shift-q  Quit xmonad",
    "mod-q        Restart xmonad",
    "mod-[1..9]   Switch to workSpace N",
    "",
    "-- Workspaces & screens",
    "mod-Shift-[1..9]   Move client to workspace N",
    "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
    "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
    "",
    "-- Mouse bindings: default actions bound to mouse events",
    "mod-button1  Set the window to floating mode and move by dragging",
    "mod-button2  Raise the window to the top of the stack",
    "mod-button3  Set the window to floating mode and resize by dragging"]
#+end_src

** Menu Systems
*** Rofi
**** Install
#+begin_src bash
$INSTALL rofi
#+end_src

**** Link Confirguration
#+begin_src bash
rm -rf $XDG_CONFIG_HOME/rofi
ln -s $DIR/rofi  $XDG_CONFIG_HOME/rofi
#+end_src

** Status Bars
*** XMobar
**** Install
#+begin_src bash
$INSTALL xmobar
#+end_src

**** Configuration
#+begin_src conf :tangle (concat (getenv "XDG_CONFIG_HOME") "/xmobar/config")
Config { 
   -- appearance
     font =         "xft:Fira Code Retina:size=11:bold:antialias=true"
   , bgColor =      "black"
   , fgColor =      "#646464"
   , position =     Top
   , border =       BottomB
   , borderColor =  "#646464"

   -- layout
   , sepChar =  "%"   -- delineator between plugin names and straight text
   , alignSep = "}{"  -- separator between left-right alignment
   , template = "%battery% | %multicpu% | %coretemp% | %memory% | %dynnetwork% }{ %RJTT% | %date% || %kbd% "

   -- general behavior
   , lowerOnStart =     True    -- send to bottom of window stack on start
   , hideOnStart =      False   -- start with window unmapped (hidden)
   , allDesktops =      True    -- show on all desktops
   , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
   , pickBroadest =     False   -- choose widest display (multi-monitor)
   , persistent =       True    -- enable/disable hiding (True = disabled)

   -- plugins
   --   Numbers can be automatically colored according to their value. xmobar
   --   decides color based on a three-tier/two-cutoff system, controlled by
   --   command options:
   --     --Low sets the low cutoff
   --     --High sets the high cutoff
   --
   --     --low sets the color below --Low cutoff
   --     --normal sets the color between --Low and --High cutoffs
   --     --High sets the color above --High cutoff
   --
   --   The --template option controls how the plugin is displayed. Text
   --   color can be set by enclosing in <fc></fc> tags. For more details
   --   see http://projects.haskell.org/xmobar/#system-monitor-plugins.
   , commands = 

        -- weather monitor
        [ Run Weather "KRDU" [ "--template", "<skyCondition> | <fc=#4682B4><tempC></fc>°C | <fc=#4682B4><rh></fc>% | <fc=#4682B4><pressure></fc>hPa"
                             ] 36000

        -- network activity monitor (dynamic interface resolution)
        , Run DynNetwork     [ "--template" , "<dev>: <tx>kB/s|<rx>kB/s"
                             , "--Low"      , "1000"       -- units: B/s
                             , "--High"     , "5000"       -- units: B/s
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 10

        -- cpu activity monitor
        , Run MultiCpu       [ "--template" , "Cpu: <total0>%|<total1>%"
                             , "--Low"      , "50"         -- units: %
                             , "--High"     , "85"         -- units: %
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 10

        -- cpu core temperature monitor
        , Run CoreTemp       [ "--template" , "Temp: <core0>°C|<core1>°C"
                             , "--Low"      , "70"        -- units: °C
                             , "--High"     , "80"        -- units: °C
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 50
                          
        -- memory usage monitor
        , Run Memory         [ "--template" ,"Mem: <usedratio>%"
                             , "--Low"      , "20"        -- units: %
                             , "--High"     , "90"        -- units: %
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 10

        -- battery monitor
        , Run Battery        [ "--template" , "Batt: <acstatus>"
                             , "--Low"      , "10"        -- units: %
                             , "--High"     , "80"        -- units: %
                             , "--low"      , "darkred"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkgreen"

                             , "--" -- battery specific options
                                       -- discharging status
                                       , "-o"	, "<left>% (<timeleft>)"
                                       -- AC "on" status
                                       , "-O"	, "<fc=#dAA520>Charging</fc>"
                                       -- charged status
                                       , "-i"	, "<fc=#006000>Charged</fc>"
                             ] 50

        -- time and date indicator 
        --   (%F = y-m-d date, %a = day of week, %T = h:m:s time)
        , Run Date           "<fc=#ABABAB>%F (%a) %T</fc>" "date" 10

        -- keyboard layout indicator
        , Run Kbd            [ ("us(dvorak)" , "<fc=#00008B>DV</fc>")
                             , ("us"         , "<fc=#8B0000>US</fc>")
                             ]
        ]
   }
#+end_src

** Notifications
*** Libnotify
Libnotify is an implementation of the Desktop Notifications Specification.
#+begin_src bash
$INSTALL libnotify
#+end_src

*** Dunst
In order to use libnotify you have to install a notification server. I use Dunst.
#+begin_src bash
$INSTALL dunst
#+end_src

**** Dunst Config
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/dunst/dunstrc")
:END:
See [[https://dunst-project.org/documentation/]]
#+begin_src conf
[global]
    ### Location ###
    follow = keyboard

    ### Geometry ###
    offset = 20x80
    width = (250, 500)
    height = 300
    transparency = 10  # Requires X11 and a compositor [0; 100]
    corner_radius = 5

    ### General Settings ###
    notification_limit = 0    # 0 means no limit
    separator_height = 2      # Distance between notifications
    show_age_threshold = 60

    ### Progress bar ###
    progress_bar_height = 10 # At least twice as big as frame width
    progress_bar_frame_width = 1
    progress_bar_min_width = 150
    progress_bar_max_width = 300

    # Padding between text and separator.
    padding = 8
    horizontal_padding = 8
    text_icon_padding = 0

    ### Frame around notification window ###
    frame_width = 0
    frame_color = "#aaaaaa" # Color 
    separator_color = frame # auto, foreground, frame, <any color>

    ### Text ###
    font = Monospace 10
    markup = full
    format = "<b>%s</b>\n%b"

    ### Icons ###
    icon_position = left # left/right/off
    min_icon_size = 0
    max_icon_size = 32
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### History ###
    sticky_history = yes
    history_length = 20

    ### Misc/Advanced ###
    dmenu = /usr/bin/dmenu

[urgency_low]
    background = "#222222"
    foreground = "#888888"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_normal]
    background = "#285577"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon
#+end_src

*** Battery Alerts (Might be Broken)
#+begin_src bash :tangle no
$INSTALL batsignal
sudo systemctl enable batsignal
#+end_src

**** Systemd Service
:PROPERTIES:
:header-args:conf: :tangle /sudo:://usr/lib/systemd/system/batsignal.service)
:END:
#+begin_src conf :tangle /sudo:://usr/lib/systemd/system/batsignal.service
[Unit]
Description=Lightweight battery daemon

[Service]
ExecStart=/usr/bin/batsignal -f 90 -w 30 -c 20 -d 10

[Install]
WantedBy=multi-user.target
#+end_src

** Virtualization
*** General
#+begin_src bash
$INSTALL libvirt qemu

# Network Connectivity with Virtual Machine #
$INSTALL iptables-nft    # NAT/DHCP Netowrking (iptables!=iptables-nft)
$INSTALL dnsmasq         # NAT/DHCP Netowrking
$INSTALL bridge-utils    # Bridged Networking
$INSTALL openbsd-netcat  # Remote Management over SSH

# Client Software #
$INSTALL virt-manager    # Graphically manage KVM, Xen or LXC

# Other Software #
$INSTALL libguestfs    # Access and modify virtual machine disk images
$INSTALL edk2-ovmf     # UEFI Emulation
$INSTALL swtpm         # TPM Emulation
         
# Members of the libvirt group have passwordless access to the RW daemon socket by default.
sudo usermod -a -G libvirt $USER
sudo usermod -a -G kvm $USER

sudo systemctl enable --now libvirtd # Also enables virtlogd and virtlockd
sudo systemctl start virtlogd

# Make sure to set user = /etc/libvirt/qemu.conf
#+end_src

*** OSX Machine
To create an OSX Virtual Machine check out the ~OSX-KVM~ project and follow the instructions in their git repository.

** Applications
*** Mimeo
Use =mimeo --mime2desk <schema>= to find what application is set as default for a certain schema. Use =mimeo --app2desk <app>= to find an applications corresponding desktop file.
#+begin_src bash
$INSTALL mimeo
#+end_src

*** Gotop
#+begin_src bash
$INSTALL gotop
#+end_src

*** Cava
#+begin_src bash
$INSTALL cava
#+end_src

*** Alsi
#+begin_src bash
$INSTALL alsi
#+end_src

*** Emacs
**** Install
#+begin_src bash
$INSTALL emacs28-git
#+end_src

**** Fonts
#+begin_src bash
$INSTALL cantarell-fonts ttf-fira-code noto-fonts ttf-roboto ttf-roboto-mono
#+end_src

**** Ahoviewer
#+begin_src bash
$INSTALL ahoviewer-git
#+end_src

**** Apply Theme
#+begin_src bash
ln $DIR/doom-moonless-theme.el ~/.emacs.d/doom-moonless-theme.el
#+end_src

**** Tangle Config
***** Setup Nim and Nimble
#+begin_src bash
$INSTALL nim nimble
#+end_src

***** Setup ntangle
#+begin_src bash
nimble install -y ntangle
#+end_src

**** Enable Daemon
#+begin_src bash
rm -rf ~/.emacs.d
ln -s $XDG_CONFIG_HOME/emacs ~/.emacs.d
rm -rf ~/backgrounds
ln -s $DIR/backgrounds ~/backgrounds

#sudo systemctl enable --now --user emacs
#+end_src

*** Firefox
#+begin_src bash
$INSTALL firefox
#+end_src

*** Qutebrowser
**** Install
#+begin_src bash
$INSTALL qutebrowser
mkdir -p $XDG_DATA_HOME/qutebrowser/userscripts
#+end_src

**** Userscripts
***** Qute-Bitwarden
#+begin_src bash
wget raw.githubusercontent.com/qutebrowser/qutebrowser/master/misc/userscripts/qute-bitwarden -O $XDG_DATA_HOME/qutebrowser/userscripts/qute-bitwarden

sed -i 's/rofi -dmenu -i -p/ivy-read.sh/g' $XDG_DATA_HOME/qutebrowser/userscripts/qute-bitwarden

chmod +x $XDG_DATA_HOME/qutebrowser/userscripts/qute-bitwarden
$INSTALL python-tldextract
#+end_src

**** Configuration
:PROPERTIES:
:header-args:python: :tangle (concat (getenv "XDG_CONFIG_HOME") "/qutebrowser/config.py")
:END:
#+begin_src python
# Set to True to load settings configured via autoconfig.yml
config.load_autoconfig(False)
c.qt.highdpi = True
c.auto_save.session = False
c.aliases = {
    'q': 'quit',
    'w': 'session-save',
    'wq': 'quit --save'
}
config.set("colors.webpage.darkmode.enabled", True)
c.completion.show = "auto"
c.downloads.location.directory = '~/Downloads'
c.tabs.show = 'never'
c.statusbar.show = 'never'

# Fonts
c.fonts.default_family = '"Fira Code Retina"'
c.fonts.default_size = '11pt'
c.fonts.completion.entry = '11pt "Fira Code Retina"'
c.fonts.debug_console = '11pt "Fira Code Retina"'
c.fonts.prompts = 'default_size "Noto Sans"'
c.fonts.statusbar = '11pt "Fira Code Retina"'

# Use dmenu
#config.bind('o', 'spawn --userscript dmenu-open')
#config.bind('O', 'spawn --userscript dmenu-open --tab')

# Colors
c.colors.completion.fg = ['#9cc4ff', 'white', 'white']
c.colors.completion.odd.bg = '#1c1f24'
c.colors.completion.even.bg = '#232429'
c.colors.completion.category.fg = '#e1acff'
c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #000000, stop:1 #232429)'
c.colors.completion.category.border.top = '#3f4147'
c.colors.completion.category.border.bottom = '#3f4147'
c.colors.completion.item.selected.fg = '#282c34'
c.colors.completion.item.selected.bg = '#ecbe7b'
c.colors.completion.item.selected.match.fg = '#c678dd'
c.colors.completion.match.fg = '#c678dd'
c.colors.completion.scrollbar.fg = 'white'
c.colors.downloads.bar.bg = '#282c34'
c.colors.downloads.error.bg = '#ff6c6b'
c.colors.hints.fg = '#282c34'
c.colors.hints.match.fg = '#98be65'
c.colors.messages.info.bg = '#282c34'
c.colors.statusbar.normal.bg = '#282c34'
c.colors.statusbar.insert.fg = 'white'
c.colors.statusbar.insert.bg = '#497920'
c.colors.statusbar.passthrough.bg = '#34426f'
c.colors.statusbar.command.bg = '#282c34'
c.colors.statusbar.url.warn.fg = 'yellow'
c.colors.tabs.bar.bg = '#1c1f34'
c.colors.tabs.odd.bg = '#282c34'
c.colors.tabs.even.bg = '#282c34'
c.colors.tabs.selected.odd.bg = '#282c34'
c.colors.tabs.selected.even.bg = '#282c34'
c.colors.tabs.pinned.odd.bg = 'seagreen'
c.colors.tabs.pinned.even.bg = 'darkseagreen'
c.colors.tabs.pinned.selected.odd.bg = '#282c34'
c.colors.tabs.pinned.selected.even.bg = '#282c34'

# Search Engines
c.url.searchengines = {
    'DEFAULT': 'https://www.google.com/search?q={}',
    'arch':    'https://wiki.archlinux.org/?search={}',
    'wiki':    'https://en.wikipedia.org/wiki/{}',
    'yt':      'https://www.youtube.com/results?search_query={}'
}

# Normal Mode Keybindings
config.bind(';m', 'hint links spawn baka-mplayer {hint-url}')
config.bind('M', 'spawn baka-mplayer {url}')
config.bind('xb', 'config-cycle statusbar.show always never')
config.bind('xt', 'config-cycle tabs.show always never')
config.bind('xx', 'config-cycle statusbar.show always never;; config-cycle tabs.show always never')

config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
config.set('content.cookies.accept', 'all', 'devtools://*')

config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')

config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')
#+end_src

**** Solarized Themes
#+begin_src bash
mkdir -p $XDG_CONFIG_HOME/qutebrowser
mkdir -p ~/Downloads
cd $XDG_CONFIG_HOME/qutebrowser && git clone https://github.com/alphapapa/solarized-everything-css && true
#+end_src

*** Bitwarden
#+begin_src bash
$INSTALL bitwarden bitwarden-cli
#+end_src

*** Spotify
#+begin_src bash
$INSTALL spotify
#+end_src

*** Discord
#+begin_src bash
$INSTALL discord
#+end_src

*** Git-Annex
#+begin_src bash
$INSTALL git-annex
#+end_src

*** Redshift
#+begin_src bash
$INSTALL redshift
#+end_src

*** OBS Studio
#+begin_src bash
$INSTALL obs-studio
#+end_src

*** Podman
#+begin_src bash
$INSTALL podman
echo "unqualified-search-registries = ['docker.io']" \
    | sudo tee /etc/containers/registries.conf
#+end_src

*** Feh
#+begin_src bash
$INSTALL feh
#+end_src

*** Neovim
**** Install
#+begin_src bash
$INSTALL neovim
mkdir -p $XDG_CONFIG_HOME/nvim
curl -fLo $XDG_DATA_HOME/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

**** Configuration
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/nvim/init.vim")
:END:
#+begin_src conf
call plug#begin('$XDG_CONFIG_HOME/nvim/plugged')
Plug 'jacoborus/tender.vim'
Plug 'LnL7/vim-nix'
Plug 'rust-lang/rust.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
call plug#end()

set number relativenumber       " set line-numbers to be relative
set nohlsearch                  " no highlight search
set mouse=a                     " recognize and enable mouse
set tabstop=4                   " show existing tab as 4 spaces
set shiftwidth=4                " use 4 spaces when indenting with '>'
set expandtab                   " on pressing tab, insert 4 spaces
set termguicolors               " use terminal colors
let g:airline_powerlin_fonts=1  " set airline theme
colorscheme tender              " change the colorscheme
let g:airline_theme = 'tender'  " change airline colorscheme
#+end_src


** Change Shell
#+begin_src bash
sudo chsh -s /usr/bin/zsh $USER
#+end_src

* After Setup
** Exporting PGP Keys
#+begin_src bash
gpg --output public.pgp --armor --export username@email
gpg --output private.pgp --armor --export-secret-key username@email

# Backup Private Keys
gpg --output backupkeys.pgp --armor --export-secret-keys --export-options export-backup user@email
#+end_src

** Linux Password Manager
#+begin_src bash :tangle no
$INSTALL -S pass
pass init "62EC2C26" # Use the last 8 characters of your GPG key's ID
#+end_src

The =passfs= addon for firefox allows you to use your password store while browsing in firefox
The =Password Store= android app allows you to access your passwords on  

** Mouse Sensitivity
#+begin_src bash :tangle no
Mouse=$(xinput list |grep -i M720 | awk -F= '{ print $2}'| awk '{print $1}'| awk 'BEGIN{ RS = "" ; FS = "\n" }{print $1}')

xinput set-prop $Mouse "libinput Middle Emulation Enabled" 1
xinput set-prop $Mouse "libinput Scroll Method Enabled" 0, 0, 1

# Set mouse acceleration speed (0 is off, higher is slower)
xinput set-prop $Mouse "libinput Accel Speed" 0.5

# Set sensitivity with the last number (0 is off, higher is slower)
xinput set-prop $Mouse "Coordinate Transformation Matrix" 1 0 0 0 1 0 0 0 1
#+end_src
