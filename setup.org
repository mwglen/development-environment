#+title: Guide to Setup Development Environment
#+PROPERTY: header-args :results none :mkdirp yes
* Configuration Files
**  Function Key Fix
Prevents volume keys from sticking.
#+begin_src conf :tangle /sudo:://etc/udev/hwdb.d/70-keyboard-framework-fix.hwdb
# Fix for Fn keys sticking on Framework laptop
evdev:atkbd:dmi:bvn*:bvr*:bd*:svnFramework:pnLaptop:pvr*:*
evdev:input:b0011v0001p0001*icon
# Primary function fixes
 KEYBOARD_KEY_3b=!F1           # F1
 KEYBOARD_KEY_3c=!F2           # F2
 KEYBOARD_KEY_3d=!F3           # F3
 KEYBOARD_KEY_3e=!F4           # F4
 KEYBOARD_KEY_3f=!F5           # F5
 KEYBOARD_KEY_40=!F6           # F6
 KEYBOARD_KEY_41=!F7           # F7
 KEYBOARD_KEY_42=!F8           # F8
 KEYBOARD_KEY_43=!F9           # F9
 KEYBOARD_KEY_44=!F10          # F10
 KEYBOARD_KEY_57=!F11          # F11
 KEYBOARD_KEY_58=!F12          # F12
 KEYBOARD_KEY_d3=!delete       # Delete key
# Secondary function fixes
 KEYBOARD_KEY_a0=!mute         # On F1 key
 KEYBOARD_KEY_ae=!volumedown   # On F2 key
 KEYBOARD_KEY_b0=!volumeup     # On F3 key
 KEYBOARD_KEY_90=!previoussong # On F4 key
 KEYBOARD_KEY_a2=!playpause    # On F5 key
 KEYBOARD_KEY_99=!nextsong     # On F6 key
 KEYBOARD_KEY_b7=!sysrq        # On F11 key
 KEYBOARD_KEY_ed=!media        # On F12 key
 KEYBOARD_KEY_d2=!insert       # On Delete key
# Arrow keys
 KEYBOARD_KEY_cb=!left         # Left Arrow key
 KEYBOARD_KEY_cd=!right        # Right Arrow key
 KEYBOARD_KEY_d0=!down         # Down Arrow
 KEYBOARD_KEY_c8=!up           # Up Arrow
 KEYBOARD_KEY_c7=!home         # On Left Arrow key
 KEYBOARD_KEY_cf=!end          # On Right Arrow key
 KEYBOARD_KEY_d1=!pagedown     # On Down Arrow key
 KEYBOARD_KEY_c9=!pageup       # On Up Arrow key
#+end_src

*** Apply Changes
#+begin_src bash :tangle no
sudo systemd-hwdb update
sudo udevadm trigger --verbose --sysname-match="event*"
#+end_src

** Grub
#+begin_src conf :tangle /sudo:://etc/default/grub
GRUB_DEFAULT=saved
GRUB_SAVEDEFAULT=true
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="Arch"
GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet"
GRUB_CMDLINE_LINUX="resume=/dev/nvme0n1p2"
GRUB_DISABLE_OS_PROBER=false
GRUB_THEME="/boot/grub/themes/vimix/theme.txt"
GRUB_PRELOAD_MODULES="part_gpt part_msdos"
GRUB_TIMEOUT_STYLE=menu
GRUB_TERMINAL_INPUT=console
GRUB_GFXMODE=auto
GRUB_GFXPAYLOAD_LINUX=keep
GRUB_DISABLE_RECOVERY=true
#+end_src

** Logind
#+begin_src conf :tangle /sudo:://etc/systemd/logind.conf
[Login]
HandlePowerKey=hibernate
HandleSuspendKey=hibernate
HandleHibernateKey=hibernate
#HandleLidSwitch=suspend
#+end_src

** XDG Defaults
*** Default Applications
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/mimeapps.list")
:END:
See https://www.freeformatter.com/mime-types-list.html for a list of schema.
#+begin_src conf
[Default Applications]
x-scheme-handler/http=org.qutebrowser.qutebrowser.desktop
x-scheme-handler/https=org.qutebrowser.qutebrowser.desktop
application/pdf=org.qutebrowser.qutebrowser.desktop
#+end_src

*** User Directories
**** Assign User Directories
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/user-dirs.dirs")
:END:
#+begin_src conf
XDG_DESKTOP_DIR="$HOME/Desktop"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_MUSIC_DIR="$HOME/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_VIDEOS_DIR="$HOME/Videos"
#+end_src

**** Create User Directories
#+begin_src bash
mkdir -p $XDG_DESKTOP_DIR
mkdir -p $XDG_DOCUMENTS_DIR
mkdir -p $XDG_DOWNLOAD_DIR
mkdir -p $XDG_MUSIC_DIR
mkdir -p $XDG_PICTURES_DIR
mkdir -p $XDG_PUBLICSHARE_DIR
mkdir -p $XDG_TEMPLATES_DIR
mkdir -p $XDG_VIDEOS_DIR
#+end_src

** ZSH Config
:PROPERTIES:
:header-args:bash: :tangle ~/.zshrc
:END:
*** General
#+begin_src bash
unsetopt BEEP
setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
unsetopt HIST_EXPIRE_DUPS_FIRST
unsetopt EXTENDED_HISTORY
HISTSIZE="10000"
SAVEHIST="10000"
HISTFILE="$XDG_STATE_HOME/zsh/history"
mkdir -p "$(dirname "$HISTFILE")"

zstyle :compinstall filename '~/.zshrc'
autoload -Uz compinit; compinit
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#+end_src

*** Keybindings
#+begin_src bash
bindkey -v
#+end_src

*** Prompt
#+begin_src bash
autoload -Uz promptinit; promptinit
zstyle :prompt:pure:prompt:success color green
zstyle :prompt:pure:prompt:error color red
zstyle :prompt:pure:prompt:continuation color white
zstyle :prompt:pure:virtualenv color white
zstyle :prompt:pure:execution_time color white
zstyle :prompt:pure:git:stash show yes
zstyle :prompt:pure:git:stash color white
zstyle :prompt:pure:git:arrow color white
zstyle :prompt:pure:git:action color white
zstyle :prompt:pure:git:dirty color white
zstyle :prompt:pure:git:branch color white
zstyle :prompt:pure:git:branch:cached color red
zstyle :prompt:pure:path color white
zstyle :prompt:pure:host color white
zstyle :prompt:pure:user color white
zstyle :prompt:pure:user:root color magenta
prompt pure
#+end_src

*** Neovim
#+begin_src bash
alias vi=nvim
alias vim=nvim
export EDITOR=nvim
export VISUAL=nvim
#+end_src

*** Audio
#+begin_src bash
playerctld daemon &> /dev/null
#+end_src

*** Emacs
#+begin_src bash
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+end_src

*** Ntangle
#+begin_src bash
alias ntangle=~/.nimble/bin/ntangle
#+end_src

* Script
:PROPERTIES:
:header-args:bash: :tangle ./scripts/setup.sh
:END:
** Script Headers
*** Use Bash
#+begin_src bash
#!/bin/bash
#+end_src

*** Stop Script on Error
#+begin_src bash
set -e
#+end_src

*** Give Verbose Output
#+begin_src bash
set -v
#+end_src

*** Warning
#+begin_src bash
# NOTE: This file is generated from setup.org
#+end_src

** Make sure OS is supported
#+begin_src bash
export DISTRO=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
if ! [ "$DISTRO" = "\"Arch Linux\"" ] \
    && ! [ "$DISTRO" = "\"Arch Linux ARM\"" ]; then echo "Unsupported Platform"
    echo "Currently only Arch Linux is supported"
    return 1
fi
#+end_src

** Get Full Path to Script
#+begin_src bash
DIR=$(realpath $(dirname $0))
#+end_src

** Setup XDG Base Directories
#+begin_src bash
source $HOME/.profile
#+end_src

*** Make Directories
#+begin_src bash
mkdir -p $XDG_CONFIG_HOME
mkdir -p $XDG_CACHE_HOME
mkdir -p $XDG_DATA_HOME
mkdir -p $XDG_STATE_HOME
mkdir -p $REPOSITORIES
#+end_src

** System Time
#+begin_src bash
sudo timedatectl set-timezone America/New_York
#+end_src bash

** Setup Yay
*** Install
#+begin_src bash
if ! (pacman -Qs yay > /dev/null); then
    if (pacman -Qs fakeroot-tcp > /dev/null); then
        sudo pacman -Syyu --needed git base-devel \ && git clone https://aur.archlinux.org/yay.git $REPOSITORIES/yay \ && cd $REPOSITORIES/yay && yes | makepkg -si
    else # cannot use --noconfirm if fakeroot-tcp is installed
        sudo pacman -Syyu --needed --noconfirm git base-devel \
            && git clone https://aur.archlinux.org/yay.git \
            && cd yay && yes | makepkg -si
    fi
    rm -rf $REPOSITORIES/yay
fi
#+end_src

*** Shortcuts
#+begin_src bash
export INSTALL="yay -S --noconfirm --needed"
export INSTALL_LOCAL="yay -U --noconfirm --needed"
export REMOVE="yay -R --noconfirm --needed"
export UPDATE="yay -Syyu --noconfirm --needed"
export SEARCH="yay -Qs"
#+end_src

*** Update Packages
#+begin_src bash
$UPDATE
#+end_src

** Fundamental Packages
*** git
#+begin_src bash
$INSTALL git openssh
mkdir -p "$XDG_CONFIG_HOME"/git
touch "$XDG_CONFIG_HOME"/git/config
git config --global user.name "Matt Glen"
git config --global user.email "mwg2202@yahoo.com"
git config --global init.defaultBranch master
#+end_src

*** man
#+begin_src bash
$INSTALL man-db man-pages
#+end_src

*** cmake
#+begin_src bash
$INSTALL cmake
#+end_src

*** rsync
#+begin_src bash
$INSTALL rsync
#+end_src

*** wget
#+begin_src bash
$INSTALL wget
echo hsts-file \= "$XDG_CACHE_HOME"/wget-hsts >> "$XDG_CONFIG_HOME/wgetrc"
#+end_src

*** Inetutils
Gives the hostname command
#+begin_src bash
$INSTALL inetutils
#+end_src

** Fonts
*** Nerd Fonts
#+begin_src bash
$INSTALL nerd-fonts-complete
#+end_src

** Languages
*** Python
#+begin_src bash
$INSTALL python python-matplotlib poetry
#+end_src

*** Rust
#+begin_src bash
$INSTALL rustup
rustup default nightly
#+end_src

** Terminal Emulators
*** Alacritty
**** Install
#+begin_src bash
$INSTALL alacritty
#+end_src

**** Configure
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/alacritty/alacritty.yml")
:END:
#+begin_src conf
colors:
  primary:
    background: "#000000"
#+end_src

** Drivers
*** NVIDIA
#+begin_src bash
$INSTALL nvidia
#+end_src

**** Optimus-Manager
#+begin_src bash
$INSTALL optimus-manager-qt
#+end_src

***** Config
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/optimus-manager/optimus-manager.conf
:END:
#+begin_src conf
[optimus]
switching=nouveau
pci_power_control=yes
pci_remove=no
pci_reset=no
        
auto_logout=no
startup_mode=auto
startup_auto_battery_mode=hybrid
startup_auto_extpower_mode=hybrid
#+end_src

*** USB
#+begin_src bash
$INSTALL usbutils usbip
#+end_src

*** Audio
#+begin_src bash
$INSTALL pulseaudio-control
#+end_src

*** Bluetooth
#+begin_src bash
$INSTALL bluez bluez-utils pulseaudio-bluetooth blueman-git
sudo systemctl enable bluetooth
#+end_src

**** Configuration
#+begin_src conf :tangle /sudo:://etc/bluetooth/main.conf
[General]

[BR]

[LE]

[GATT]

[AVDTP]

[Policy]
AutoEnable=true

[AdvMon]
#+end_src

*** Wifi
**** Network Manager
#+begin_src bash
$INSTALL networkmanager network-manager-applet
sudo systemctl enable NetworkManager
#+end_src

**** Network Manager Dmenu
#+begin_src bash
$INSTALL networkmanager-dmenu-git
#+end_src

***** Config
#+begin_src conf :tangle (concat (getenv "XDG_CONFIG_HOME") "/networkmanager-dmenu/config.ini")
[dmenu]
dmenu_command = /usr/bin/rofi -dmenu
# rofi_highlight = True
# pinentry = <Pinentry command>  # (Default: None) e.g. `pinentry-gtk`
# wifi_chars = ▂▄▆█

[dmenu_passphrase]
# obscure = True
# obscure_color = #222222

[editor]
terminal = alacritty
#+end_src

*** Audio
**** Install
#+begin_src bash
$INSTALL alsa-utils pavucontrol
#+end_src

**** Set XF86 Keys
#+begin_src conf :tangle ~/.xbindkeysrc
### Audio Control ###
"pactl set-sink-volume @DEFAULT_SINK@ +10%"
    XF86AudioRaiseVolume
"pactl set-sink-volume @DEFAULT_SINK@ -10%"
    XF86AudioLowerVolume
"pactl set-sink-mute @DEFAULT_SINK@ toggle"
    XF86AudioMute
"pactl set-source-mute @DEFAULT_SOURCE@ toggle"
    XF86AudioMicMute
#+end_src

*** Media
**** MPV
***** Install
#+begin_src bash
$INSTALL playerctl mpv yt-dlp baka-mplayer
#+end_src

***** MPV Config
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/mpv/mpv.conf")
:END:
#+begin_src conf
script-opts=ytdl_hook-ytdl_path=yt-dlp
#+end_src


**** Set XF86 Keys
#+begin_src conf :tangle ~/.xbindkeysrc
### Media Control ###
"playerctl previous"
    XF86AudioPrev
"playerctl next"
    XF86AudioNext
"playerctl play-pause"
    XF86AudioPlay
"playerctl stop"
    XF86AudioStop
#+end_src

*** Brightness
**** Setup Video Group
#+begin_src bash
sudo groupadd video && true
sudo usermod +aG video mwglen && true
sudo chgrp video /sys/class/backlight/intel_backlight/brightness && true
#+end_src

#+begin_src conf :tangle /sudo:://etc/udev/rules.d/backlight.rules
ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<vendor>", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="<vendor>", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
#+end_src

**** Brightnessctl
***** Install
#+begin_src bash
$INSTALL brightnessctl
#+end_src

***** Set XF86 Keys
#+begin_src conf :tangle no
### +begin_src conf :tangle ~/.xbindkeysrc
### Brightness Control ###
"brightnessctl set 10%+"
    XF86MonBrightnessUp
"brightnessctl set 10%-"
    XF86MonBrightnessDown
#+end_src

**** Brillo
***** Install
#+begin_src bash
git clone https://github.com/CameronNemo/brillo $REPOSITORIES/brillo && true
cd $REPOSITORIES/brillo && sudo make install
#+end_src

***** Set XF86 Keys
#+begin_src conf :tangle ~/.xbindkeysrc
### Brightness Control ###
"brillo -q -u 150000 -A 5"
    XF86MonBrightnessUp
"brillo -q -u 150000 -U 5"
    XF86MonBrightnessDown
#+end_src

*** Printing/Scanning
**** Base Drivers
To scan I recommend using simple-scan
#+begin_src bash
$INSTALL cups sane python-pillow simple-scan
sudo systemctl enable cups
#+end_src

**** Optional Drivers for HP Printers
Runs using cups and sane. Comes with a systemtray available through the ~hp-systray~ command. To get started find the ip address of your printer and then run ~hp-setup <ip-address>~.
#+begin_src bash
$INSTALL hplip
#+end_src

*** MSP430 Launchpad
#+begin_src bash
$INSTALL msp430-elf-gcc-bin
#+end_src

** Setup Core Packages
*** Latex
#+begin_src bash
$INSTALL texlive-core texlive-latexextra
#+end_src

*** ZSH
**** Install
#+begin_src bash
$INSTALL zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions
#+end_src

**** Source Config
#+begin_src bash
source $HOME/.zshenv
#+end_src

**** Dot Profile
#+begin_src bash :tangle ~/.profile
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share
export XDG_STATE_HOME=$HOME/.local/state
export BACKGROUNDS=$HOME/Backgrounds
export REPOSITORIES=$HOME/Repositories
export PATH="$PATH:$HOME/development-environment/scripts"

export XDG_DESKTOP_DIR="$HOME/Desktop"
export XDG_DOCUMENTS_DIR="$HOME/Documents"
export XDG_DOWNLOAD_DIR="$HOME/Downloads"
export XDG_MUSIC_DIR="$HOME/Music"
export XDG_PICTURES_DIR="$HOME/Pictures"
export XDG_PUBLICSHARE_DIR="$HOME/Public"
export XDG_TEMPLATES_DIR="$HOME/Templates"
export XDG_VIDEOS_DIR="$HOME/Videos"
#+end_src

**** Create User Directories
#+end_src

**** Environment Config
:PROPERTIES:
:header-args:bash: :tangle ~/.zshenv
:END:
#+begin_src bash
source $HOME/.profile
alias ls="ls --color=auto --group-directories"
alias ll="ls -alh"
alias la="ls -A"
alias df="df -h"
alias free="free -h"
alias grep="grep --color=auto"
alias egrep="egrep --color=auto"
alias fgrep="fgrep --color=auto"
alias services="systemctl list-unit-files --state=enabled"
alias ip="ip -color=auto"
alias spotify="spotify --force-device-scale-factor=2"
#+end_src

**** Pure (ZSH Theme)
#+begin_src bash
$INSTALL nodejs npm
sudo npm install --global pure-prompt
#+end_src

** Xmodmap
*** Install
#+begin_src bash
$INSTALL xorg-xmodmap
#+end_src

*** Configuration
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/xmodmap/config")
:END:
Moves caps lock to right control and left control to caps lock
#+begin_src conf
clear lock
clear control
keycode 66 = Control_L NoSymbol Control_L
add control = Control_L
add lock = Control_R
#+end_src

Moves left alt to right alt and left super to left alt
#+begin_src conf
clear mod1
clear mod4
keycode 64 = Super_L
keycode 108 = Alt_L
add mod1 = Alt_L
add mod4 =  Super_L
#+end_src

Output Escape when Ctrl+; is pressed
#+begin_src conf
keycode 47 = semicolon colon Escape 
#+end_src


** Power Saving Mode using TLP
1. Run the following commands to start using TLP:
   
   #+begin_src bash
   $INSTALL tlp
   sudo systemctl enable tlp
   #+end_src

** File System Support
*** Zip Archives
#+begin_src bash :tangle no
$INSTALL zip unzip
#+end_src

*** Samba
#+begin_src bash :tangle no
$INSTALL samba
#+end_src

**** Config
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/samba/smb.conf
:END:
#+begin_src conf
# This is the main Samba configuration file. You should read the
# smb.conf(5) manual page in order to understand the options listed
# here. Samba has a huge number of configurable options (perhaps too
# many!) most of which are not shown in this example
#
# For a step to step guide on installing, configuring and using samba, 
# read the Samba-HOWTO-Collection. This may be obtained from:
#  http://www.samba.org/samba/docs/Samba-HOWTO-Collection.pdf
#
# Many working examples of smb.conf files can be found in the 
# Samba-Guide which is generated daily and can be downloaded from: 
#  http://www.samba.org/samba/docs/Samba-Guide.pdf
#
# NOTE: Whenever you modify this file you should run the command "testparm"
# to check that you have not made any basic syntactic errors. 
#
#======================= Global Settings =====================================
[global]

# workgroup = NT-Domain-Name or Workgroup-Name, eg: MIDEARTH
   workgroup = WORKGROUP

# server string is the equivalent of the NT Description field
   server string = Samba Server

# Server role. Defines in which mode Samba will operate. Possible
# values are "standalone server", "member server", "classic primary
# domain controller", "classic backup domain controller", "active
# directory domain controller".
#
# Most people will want "standalone server" or "member server".
# Running as "active directory domain controller" will require first
# running "samba-tool domain provision" to wipe databases and create a
# new domain.
   server role = standalone server

# This option is important for security. It allows you to restrict
# connections to machines which are on your local network. The
# following example restricts access to two C class networks and
# the "loopback" interface. For more examples of the syntax see
# the smb.conf man page
;   hosts allow = 192.168.1. 192.168.2. 127.

# Uncomment this if you want a guest account, you must add this to /etc/passwd
# otherwise the user "nobody" is used
;  guest account = pcguest

# this tells Samba to use a separate log file for each machine
# that connects
   log file = /usr/local/samba/var/log.%m

# Put a capping on the size of the log files (in Kb).
   max log size = 50

# Specifies the Kerberos or Active Directory realm the host is part of
;   realm = MY_REALM

# Backend to store user information in. New installations should 
# use either tdbsam or ldapsam. smbpasswd is available for backwards 
# compatibility. tdbsam requires no further configuration.
;   passdb backend = tdbsam

# Using the following line enables you to customise your configuration
# on a per machine basis. The %m gets replaced with the netbios name
# of the machine that is connecting.
# Note: Consider carefully the location in the configuration file of
#       this line.  The included file is read at that point.
;   include = /usr/local/samba/lib/smb.conf.%m

# Configure Samba to use multiple interfaces
# If you have multiple network interfaces then you must list them
# here. See the man page for details.
;   interfaces = 192.168.12.2/24 192.168.13.2/24 

# Where to store roving profiles (only for Win95 and WinNT)
#        %L substitutes for this servers netbios name, %U is username
#        You must uncomment the [Profiles] share below
;   logon path = \\%L\Profiles\%U

# Windows Internet Name Serving Support Section:
# WINS Support - Tells the NMBD component of Samba to enable it's WINS Server
;   wins support = yes

# WINS Server - Tells the NMBD components of Samba to be a WINS Client
#	Note: Samba can be either a WINS Server, or a WINS Client, but NOT both
;   wins server = w.x.y.z

# WINS Proxy - Tells Samba to answer name resolution queries on
# behalf of a non WINS capable client, for this to work there must be
# at least one	WINS Server on the network. The default is NO.
;   wins proxy = yes

# DNS Proxy - tells Samba whether or not to try to resolve NetBIOS names
# via DNS nslookups. The default is NO.
   dns proxy = no 

# These scripts are used on a domain controller or stand-alone 
# machine to add or delete corresponding unix accounts
;  add user script = /usr/sbin/useradd %u
;  add group script = /usr/sbin/groupadd %g
;  add machine script = /usr/sbin/adduser -n -g machines -c Machine -d /dev/null -s /bin/false %u
;  delete user script = /usr/sbin/userdel %u
;  delete user from group script = /usr/sbin/deluser %u %g
;  delete group script = /usr/sbin/groupdel %g


#============================ Share Definitions ==============================
[homes]
   comment = Home Directories
   browseable = no
   writable = yes

# NOTE: If you have a BSD-style print system there is no need to 
# specifically define each individual printer
[printers]
   comment = All Printers
   path = /usr/spool/samba
   browseable = no
# Set public = yes to allow user 'guest account' to print
   guest ok = no
   writable = no
   printable = yes

[Share]
path = /home/mwglen/Share
available = yes
valid users = geek
read only = no
browsable = yes
public = yes
writable = yes

#+end_src

*** TODO Auto Mount Daemon
#+begin_src bash :tangle no
$INSTALL autofs
sudo mkdir -p /misc/android
#+end_src

**** Autofs Config
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/autofs/auto.misc
:END:
#+begin_src conf :tangle no
#
# This is an automounter map and it has the following format
# key [ -mount-options-separated-by-comma ] location
# Details may be found in the autofs(5) manpage

cd		-fstype=iso9660,ro,nosuid,nodev         :/dev/cdrom
android         -fstype=fuse,allow_other,umask=000      :mtpfs

# the following entries are samples to pique your imagination
#linux		-ro,soft		ftp.example.org:/pub/linux
#boot		-fstype=ext2		:/dev/hda1
#floppy		-fstype=auto		:/dev/fd0
#floppy		-fstype=ext2		:/dev/fd0
#e2floppy	-fstype=ext2		:/dev/fd0
#jaz		-fstype=ext2		:/dev/sdc1
#removable	-fstype=ext2		:/dev/hdd
#+end_src

*** exFAT Support
#+begin_src bash
$INSTALL exfatprogs
#+end_src

*** NTFS Support
#+begin_src bash
$INSTALL ntfs-3g
#+end_src

*** VHD and VHDX Support
#+begin_src bash
$INSTALL libguestfs
#+end_src

*** Media Transfer Protocol
#+begin_src bash
$INSTALL mtpfs
#+end_src

*** Udisks
#+begin_src bash
$INSTALL udisks2
#+end_src

** Syncing Emails to a Local Directory
*** Install Isync
*NOTE*: ~isync~ gives us the ~mbsync~ utility
#+begin_src bash
$INSTALL isync
#+end_src

*** Configure Mbsync
*NOTE*: Different distributions of linux might place the certificate file at a different location.
:PROPERTIES:
:header-args:conf: :tangle ~/.mbsyncrc
:END:
#+begin_src conf
IMAPAccount gmail
Host imap.gmail.com
User mwg2202@gmail.com
PassCmd ""
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Subfolders Verbatim
Path ~/personal-documents/Mail/
Inbox ~/personal-documents/Mail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
Create Both
SyncState *
#+end_src

*** Create a Local Folder to Hold Emails
#+begin_src bash
mkdir -p ~/personal-documents/Mail
#+end_src

*** Run Mbsync
#+begin_src bash :tangle no
mbsync -a
#+end_src

** Converting ICS format to Org
See [[https://tero.hasu.is/blog/org-icalendar-import/]] for more information.
*** Install
#+begin_src bash
$INSTALL ruby
gem install date icalendar optparse tzinfo

git clone https://tero.hasu.is/repos/icalendar-to-org.git $REPOSITORIES/icalendar-to-org && true
#+end_src

***  To Use
#+begin_src bash :tangle no
ics-to-org input.ics > output.org
#+end_src

** Setup a Software Access Point
*** Linux-Wifi-Hotspot
~linux-wifi-hotspot~ is an AUR package that allows you to easily create a wifi-hotspot without needing to mess around with ~hostapd~, ~dnsmasq~, and ~iptables~. It includes both a gui and cli interface.
#+begin_src bash
$INSTALL linux-wifi-hotspot
#+end_src

**** Use CLI
#+begin_src bash :tangle no
create_ap wlan0 eth0 MyAccessPoint MyPassPhrase
#+end_src

**** Use GUI
#+begin_src bash :tangle no
wihotspot
#+end_src

** Polybar Panel
*** Install Polybar
Polybar-git is used for the wm-restack=generic feature
#+begin_src bash
$INSTALL polybar-git
#+end_src

**** Configuration
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/config.ini")
:END:
***** Global Settings
#+begin_src conf
[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0
#+end_src

***** Themes
****** Moonless
#+begin_src conf
[colors]
background = #00000000
foreground = #c5c8c6
green = #b5bd68
yellow = #f0c674
violet = #b294bb
blue = #81a2be
red = #cc6666
grey = #6b6b6b
#+end_src

***** EXWM Panel
#+begin_src conf
[bar/exwm]
width = 100%
height = 70
offset-x = 0
offset-y = 0
padding = 2
fixed-center = true
enable-ipc = true
border-color = #c5c8c6
border-bottom-size = 0
line-size = 3
bottom = false
module-margin = 1
             
background = ${colors.background}
foreground = ${colors.foreground}
font-0 = "NotoSans Nerd Font:size=20:weight=bold"

modules-left = date
;modules-center = cpu temperature memory
modules-right = wireless pulseaudio backlight redshift battery

tray-position = none
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize
#+end_src

***** XMonad Panel
#+begin_src conf
[bar/xmonad]
width = 100%
height = 35
offset-x = 0
offset-y = 0
padding = 2
fixed-center = true
enable-ipc = true
border-color = #c5c8c6
line-size = 3
bottom = true
module-margin = 1
wm-restack = generic
       
background = ${colors.background}
foreground = ${colors.foreground}
font-0 = "Ubuntu Nerd Font:size=20:weight=bold"

modules-left = xworkspaces date spotify
modules-center = cpu temperature memory
modules-right = pulseaudio redshift wireless backlight battery

tray-position = right
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize
#+end_src

***** XWorkspaces
#+begin_src conf
[module/xworkspaces]
type = internal/xworkspaces

icon-0 = 1;
     
label-active = %icon% [%name%]
label-active-foreground = ${colors.red}
label-active-underline = ${colors.red}

label-occupied = %icon% %name%
label-occupied-foreground = ${colors.red}
label-occupied-underline = ${colors.red}

label-empty = 
label-empty-underline = ${colors.red}

#+end_src

***** Xkeyboard
#+begin_src conf
[module/keyboard]
type = internal/xkeyboard
blacklist-0 = num lock
blacklist-1 = scroll lock
format-prefix = " "
format-prefix-foreground = ${colors.foreground}
format-prefix-background = ${colors.background}
format-prefix-underline = #3ecfb2
format-foreground = ${colors.foreground}

label-layout = %layout%
label-layout-underline = #3ecfb2
label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-background = ${colors.background}
#+end_src

***** Filesystem
#+begin_src conf
[module/filesystem]
type = internal/fs
mount-0 = /
;mount-1 = /home
;mount-2 = /var
interval = 30
fixed-values = false
#+end_src

***** Spotify
#+begin_src conf
[module/spotify]
type = custom/script
exec = ~/.config/polybar/scripts/spotify.sh
interval = 1
format-foreground = ${colors.foreground}
format-background = ${colors.background}
format-padding = 2
format-underline = ${colors.green}
format-prefix = " "
format-prefix-foreground = ${colors.green}
label = %output:0:150%
#+end_src

****** Script https://github.com/NicholasFeldman/dotfiles/blob/master/polybar/.config/polybar/spotify.sh
:PROPERTIES:
:header-args:sh: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/scripts/spotify.sh") :tangle-mode (identity #o755)
:END:
#+begin_src sh
#!/bin/sh
main() {
  if ! pgrep -x spotify >/dev/null; then
    echo ""; exit
  fi  

  cmd="org.freedesktop.DBus.Properties.Get"
  domain="org.mpris.MediaPlayer2"
  path="/org/mpris/MediaPlayer2"

  meta=$(dbus-send --print-reply --dest=${domain}.spotify \
    /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:${domain}.Player string:Metadata)

  artist=$(echo "$meta" | sed -nr '/xesam:artist"/,+2s/^ +string "(.*)"$/\1/p' | tail -1  | sed 's/\&/\\&/g' | sed 's#\/#\\/#g')
  album=$(echo "$meta" | sed -nr '/xesam:album"/,+2s/^ +variant +string "(.*)"$/\1/p' | tail -1| sed 's/\&/\\&/g'| sed 's#\/#\\/#g')
  title=$(echo "$meta" | sed -nr '/xesam:title"/,+2s/^ +variant +string "(.*)"$/\1/p' | tail -1 | sed 's/\&/\\&/g'| sed 's#\/#\\/#g')

  echo "${*:-%artist% - %title%}" | sed "s/%artist%/$artist/g;s/%title%/$title/g;s/%album%/$album/g"i | sed "s/\&/\&/g" | sed "s#\/#\/#g"

}

main "$@"
#+end_src

***** Compton
#+begin_src conf
[module/compton]
type = custom/script
exec = ~/.config/polybar/scripts/compton.sh
click-left = ~/.config/polybar/scripts/compton-toggle.sh
interval = 5
format-foreground = ${colors.foreground}
format-underline = #00AF02
#+end_src

***** Weather
#+begin_src conf
[module/weather]
type = custom/script
interval = 10
format = <label>
format-prefix = "WTHR "
format-prefix-foreground = #3EC13F
format-underline = #3EC13F
format-foreground = ${colors.foreground}
exec = python -u ~/.config/polybar/scripts/weather.py
tail = true
#+end_src

***** CPU Utilization
#+begin_src conf
[module/cpu]
type = internal/cpu
interval = 2
format = CPU <label>
format-underline = ${colors.red}
format-foreground = ${colors.red}
label = %percentage:2%%
#+end_src

***** Date and Time
#+begin_src conf
[module/date]
type = internal/date
interval = 5
date = "%B %d, %Y"
date-alt = "%A %B %d, %Y"
time = %l:%M %p
time-alt = %H:%M:%S
format-underline = ${colors.red}
format-foreground = ${colors.red}

label = %date% %time%
#+end_src

***** Battery
#+begin_src conf
[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%%
format-charging = <animation-charging>   <label-charging>%{F-}
format-discharging = <ramp-capacity>   <label-discharging>%{F-}
format-full = <ramp-capacity>   <label-full>%{F-}

ramp-capacity-0 = "%{u#cc6666}%{+u}%{F#cc6666}"
ramp-capacity-1 = "%{u#c67c67}%{+u}%{F#c67c67}"
ramp-capacity-2 = "%{u#c19267}%{+u}%{F#c19267}"
ramp-capacity-3 = "%{u#bba768}%{+u}%{F#bba768}"
ramp-capacity-4 = "%{u#b5bd68}%{+u}%{F#b5bd68}"

animation-charging-0 = "%{u#b5bd68}%{+u}%{F#b5bd68}"
animation-charging-1 = "%{u#b5bd68}%{+u}%{F#b5bd68}"
animation-charging-2 = "%{u#b5bd68}%{+u}%{F#b5bd68}"
animation-charging-3 = "%{u#b5bd68}%{+u}%{F#b5bd68}"
animation-charging-4 = "%{u#b5bd68}%{+u}%{F#b5bd68}"
animation-charging-framerate = 750
#+end_src

***** Temperature
#+begin_src conf
[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 70

format = TEMP <label>
format-warn = TEMP <label-warn>
format-underline = ${colors.red}
format-warn-underline = ${colors.red}
format-foreground = ${colors.red}

label = %temperature-c%
label-warn = %temperature-c%!
#+end_src

***** Pulse Audio
#+begin_src conf
[module/pulseaudio]
type = custom/script
tail = true
label-padding = 2
format-underline = ${colors.violet}
format-foreground = ${colors.violet}
exec = pulseaudio-control --icons-volume " , " --icon-muted " " --sink-nicknames-from "device.description" --sink-nickname "alsa_output.pci-0000_00_1f.3.analog-stereo: Built In Speakers" listen

click-right = pavucontrol
click-left = pulseaudio-control togmute
click-middle = pulseaudio-control --sink-blacklist "alsa_output.pci-0000_01_00.1.hdmi-stereo-extra2" next-sink

scroll-up = pulseaudio-control up
scroll-down = pulseaudio-control down
#+end_src

***** Wireless Network
#+begin_src conf
[module/wireless]
type = internal/network
interface = wlan0

label-connected = %essid%
label-disconnected = not connected

format-connected =   <label-connected>
format-connected-underline = ${colors.green}
format-connected-foreground = ${colors.green}
format-disconnected = <label-disconnected>
format-disconnected-underline = ${colors.grey}
format-disconnected-foreground = ${colors.grey}
format-packetloss = <animation-packetloss> <label-connected>
format-packetloss-underline = ${colors.red}
format-packetloss-foreground = ${colors.red}
#+end_src

***** Memory                              
#+begin_src conf
[module/memory]
type = internal/memory
interval = 3
format = <label>
label = MEM %percentage_used:2%%
format-underline = ${colors.red}
format-foreground = ${colors.red}
#+end_src

***** Backlight
****** Give Polybar Access to Change Backlight
#+begin_src bash
sudo mkdir -p /etc/udev/rules.d
groupadd -r video && true
sudo usermod -a -G video $USER
sudo chgrp video /sys/class/backlight/intel_backlight/brightness
sudo chmod g+w /sys/class/backlight/intel_backlight/brightness
#+end_src

****** Module
#+begin_src conf
[module/backlight]
type = internal/backlight
enable-scroll = true
card = intel_backlight
format = <ramp> <label>
label = %percentage%%
;yellow = #f0c674
;blue = #81a2be
ramp-0 = "%{u#81a2be}%{+u}%{F#81a2be}"
ramp-1 = "%{u#81a2be}%{+u}%{F#81a2be}"
ramp-2 = "%{u#81a2be}%{+u}%{F#81a2be}"
ramp-3 = "%{u#f0c674}%{+u}%{F#f0c674}"
ramp-4 = "%{u#f0c674}%{+u}%{F#f0c674}"
ramp-5 = "%{u#f0c674}%{+u}%{F#f0c674}"
ramp-6 = "%{u#f0c674}%{+u}%{F#f0c674}"
#+end_src

***** Redshift
****** Module
#+begin_src conf
[module/redshift]
type = custom/script
exec = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh temperature
click-left = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh toggle
scroll-up = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh increase
scroll-down = source $XDG_CONFIG_HOME/polybar/scripts/env.sh && $XDG_CONFIG_HOME/polybar/scripts/redshift.sh decrease
interval = 1
format-underline = ${colors.red}
format-foreground = ${colors.red}
#+end_src

****** Scripts
******* env.sh
:PROPERTIES:
:header-args:sh: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/scripts/env.sh") :tangle-mode (identity #o755)
:END:
#+begin_src sh
export REDSHIFT=on
export REDSHIFT_TEMP=5600
#+end_src

******* redshift.sh
:PROPERTIES:
:header-args:sh: :tangle (concat (getenv "XDG_CONFIG_HOME") "/polybar/scripts/redshift.sh") :tangle-mode (identity #o755)
:END:
#+begin_src sh
#!/bin/sh
envFile=$XDG_CONFIG_HOME/polybar/scripts/env.sh
changeValue=300

changeMode() {
  sed -i "s/REDSHIFT=$1/REDSHIFT=$2/g" $envFile 
  REDSHIFT=$2
  echo $REDSHIFT
}

changeTemp() {
  if [ "$2" -gt 1000 ] && [ "$2" -lt 25000 ]
  then
    sed -i "s/REDSHIFT_TEMP=$1/REDSHIFT_TEMP=$2/g" $envFile 
    redshift -P -O $((REDSHIFT_TEMP+changeValue))
  fi
}

case $1 in 
  toggle) 
    if [ "$REDSHIFT" = on ];
    then
      changeMode "$REDSHIFT" off
      redshift -x
    else
      changeMode "$REDSHIFT" on
      redshift -O "$REDSHIFT_TEMP"
    fi
    ;;
  increase)
    changeTemp $((REDSHIFT_TEMP)) $((REDSHIFT_TEMP+changeValue))
    ;;
  decrease)
    changeTemp $((REDSHIFT_TEMP)) $((REDSHIFT_TEMP-changeValue));
    ;;
  temperature)
    case $REDSHIFT in
      on)
        if (($REDSHIFT_TEMP > 5000)); then
            COLOR="#6b6b6b"
        elif (($REDSHIFT_TEMP > 4000)); then
            COLOR="#7E6A6A"
        elif (($REDSHIFT_TEMP > 3000)); then
            COLOR="#926969"
        elif (($REDSHIFT_TEMP > 2000)); then
            COLOR="#A56868"
        elif (($REDSHIFT_TEMP > 1500)); then
            COLOR="#B96767"
        else
            COLOR="#cc6666"
        fi
        # echo "%{u$COLOR}%{+u}%{F$COLOR} $REDSHIFT_TEMP%{F-}%{u-}%{-u}"

        echo "%{F$COLOR} $REDSHIFT_TEMP%{F-}"
        ;;
      off)
        echo "%{F#6b6b6b} off%{F-}"
        ;;
    esac
    ;;
esac
#+end_src

***** Workspace Indicator
#+begin_src conf
[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-padding = 1
#+end_src

** QT/KDE Theme
*** Install Theme
#+begin_src bash
$INSTALL materia-kde kvantum-theme-materia kvantum
#+end_src

** GTK Theme
*** Install Theme
#+begin_src bash
$INSTALL materia-gtk-theme phinger-cursors
#+end_src

*** Configure GTK 3.0
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/gtk-3.0/settings.ini")
:END:
#+begin_src conf
[Settings]
gtk-icon-theme-name = Materia
gtk-theme-name = Materia
gtk-application-prefer-dark-theme = true
gtk-cursor-theme-name=phinger-cursors
#+end_src

*** Configure GTK 2.0
:PROPERTIES:
:header-args:conf: :tangle ~/.gtkrc-2.0
:END:
#+begin_src conf
[Settings]
gtk-icon-theme-name = "Materia"
gtk-theme-name = "Materia"
gtk-application-prefer-dark-theme = "true"
gtk-cursor-theme-name="phinger-cursors"
#+end_src

*** Cursor Icons
#+begin_src conf :tangle ~/.icons/default/index.theme
[Icon Theme]
Name=Default
Comment=Default Cursor Theme
Inherits=phinger-cursors
#+end_src

** Display Managers
*** Configure X11
#+begin_src conf :tangle ~/.Xresources
Xft.dpi: 200
Xft.antialias: true
Xft.rgba: rgb
#+end_src

*** LightDM
**** Install LightDM
#+begin_src bash
$INSTALL lightdm
sudo systemctl enable lightdm
#+end_src

**** Install LightDM Theme
#+begin_src bash
$INSTALL lightdm-webkit2-greeter
sudo mkdir -p /usr/share/lightdm-webkit/themes/litaravan

wget https://github.com/Litarvan/lightdm-webkit-theme-litarvan/releases/download/v3.2.0/lightdm-webkit-theme-litarvan-3.2.0.tar.gz -O $REPOSITORIES/lightdm-webkit-theme-litarvan-3.2.0.tar.gz

sudo tar -xf $REPOSITORIES/lightdm-webkit-theme-litarvan-3.2.0.tar.gz -C /usr/share/lightdm-webkit/themes/litarvan
#+end_src

**** Configure LightDM
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/lightdm/lightdm.conf
:END:
#+begin_src conf
[LightDM]
run-directory=/run/lightdm

[Seat:*]
greeter-session=lightdm-webkit2-greeter
session-wrapper=/etc/lightdm/Xsession

[XDMCPServer]
[VNCServer]
#+end_src

**** Configure LightDM Greeter
:PROPERTIES:
:header-args:conf: :tangle /sudo:://etc/lightdm/lightdm-webkit2-greeter.conf
:END:
#+begin_src conf
[greeter]
debug_mode          = false
detect_theme_errors = true
screensaver_timeout = 300
secure_mode         = true
time_format         = LT
time_language       = auto
webkit_theme        = litarvan

[branding]
background_images = /usr/share/backgrounds
logo              = /usr/share/pixmaps/archlinux-logo.svg
user_image        = /usr/share/pixmaps/archlinux-user.svg
#+end_src


** Compositors
*** Picom
**** Install
#+begin_src bash
# The ibhagwan fork of picom has rounded corners and dual kawase blur
# $INSTALL picom-ibhagwan-git

# The ibhagwan fork of picom has rounded corners, dual kawase blur, and window animations
# $INSTALL picom-jonaburg-git

# My fork of jonaburg's fork of picom has an updated picom-trans binary that can be used to toggle transparency of a window
git install https://github.com/mwglen/picom.git $REPOSITORIES/picom
cd $REPOSITORIES/picom && meson --buildtype=release . build && sudo ninja -C build install
#+end_src

**** Configuration (picom-ibhagwan-git)
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/picom.conf")
:END:
#+begin_src conf :tangle no
#################################
#             Shadows           #
#################################
shadow = false;
shadow-radius = 7;
# shadow-opacity = .75
shadow-offset-x = -15;
shadow-offset-y = -15;
no-dock-shadow = false
no-dnd-shadow = false

shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#           Fading              #
#################################
fading = true
fade-in-step = 0.03;
fade-out-step = 0.03;

#################################
#   Transparency / Opacity      #
#################################
# Only the first rule matching a window will be applied to that window
opacity-rule = [
  "100:class_g = 'dmenu'",
  "60:class_g = 'Polybar'",
  "60:class_g = 'Rofi'",
  "80:class_i = 'xmobar'",
  "100:fullscreen",
  "60:!focused && class_i != 'xmobar'",
  "80:focused",
];
                     
#################################
#     Background-Blurring       #
#################################
# blur-method = "dual_kawase";
# blur-strength = 5;
# blur-background-exclude = [
#   "window_type = 'desktop'",
#   "_GTK_FRAME_EXTENTS@:c"
# ];

#################################
#       General Settings        #
#################################
backend = "glx";
vsync = true
mark-wmwin-focused = true;
mark-ovredir-focused = true;
use-ewmh-active-win = true;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 0
detect-transient = true
detect-client-leader = true
glx-no-stencil = true;
glx-no-rebind-pixmap = true;
use-damage = true
log-level = "warn";
#corner-radius = 50; # obviously doesn't work with EXWM, but useful
# wintypes:
# {
  #tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  # dock = { shadow = false; opacity = 0.9; };
  #dnd = { shadow = false; }
  #popup_menu = { opacity = 0.8; }
  #dropdown_menu = { opacity = 0.8; }
  #utility = { opacity = 0.8; }
# };
#+end_src

**** Configuration (picom-jonaburg-git)
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/picom.conf")
:END:
#+begin_src conf
#################################
#          Animations           #
#################################
transition-length = 300
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#################################
#             Corners           #
#################################
corner-radius = 10.0;
rounded-corners-exclude = [
  "class_g = 'Polybar'",
  "class_g = 'Rofi'",
];
round-borders = 1;
round-borders-exclude = [
];

#################################
#             Shadows           #
#################################
shadow = true;
# shadow-radius = 7;
# shadow-opacity = .75
# shadow-offset-x = -7;
# shadow-offset-y = -7;
# no-dock-shadow = false
# no-dnd-shadow = false

shadow-exclude = [
  "class_g = 'Polybar'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#           Fading              #
#################################
fading = true;
fade-exclude = [
  "class_g = 'slop'"   # maim
]


#################################
#   Transparency / Opacity      #
#################################
# only the first rule matching a window will be applied to that window
opacity-rule = [
  "100:class_g = 'dmenu'",
  #"80:class_i = 'xmobar'",
  "60:class_g = 'Rofi'",
  "100:fullscreen",
  "60:!focused",
  "80:focused",
];

# windows that should always be considered focused
focus-exclude = [
  "class_i = 'xmobar'",
];

#popup_menu = { opacity = 0.8; }
#dropdown_menu = { opacity = 0.8; }

#################################
#     Background-Blurring       #
#################################
blur: {
  method = "kawase";
  strength = 7;
  background = false;
  background-frame = false;
  background-fixed = false;
  kern = "3x3box";
}

blur-background-exclude = [
  "class_g = 'Polybar'",
  "class_g = 'slop'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#       General Settings        #
#################################
experimental-backends = true;
backend = "glx";
vsync = true
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-client-opacity = true;
refresh-rate = 0
use-ewmh-active-win = true
detect-transient = true
detect-client-leader = true
use-damage = false
log-level = "info";

wintypes:
{
  #normal = { fade = false; shadow = false; }
  tooltip = {
    fade = true;
    shadow = true;
    opacity = 0.75;
    focus = true;
    full-shadow = false;
  };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
#+end_src

** Xorg
*** Install
#+begin_src bash
$INSTALL xorg dbus xorg-xrdb xorg-transset wmctrl
#+end_src

**** Xsession File
#+begin_src bash :tangle ~/.xprofile
# Display
xrandr --dpi 200 --output eDP-1 --primary --mode 3840x2160 --pos 0x0 --rotate normal --output DP-1 --off --output HDMI-1 --off
picom -b
feh --bg-scale $BACKGROUNDS/nge.jpeg

# Keybindings
xbindkeys
xmodmap $XDG_CONFIG_HOME/xmodmap/config
#setxkbmap -layout us,ru -option grp:toggle -option caps:ctrl_modifier

# QT Config
export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_STYLE_OVERRIDE=kvantum

# Systray Apllications
optimus-manager-qt &
nm-applet &
hp-systray &
flameshot &
#+end_src

** XBindKeys
#+begin_src bash
$INSTALL xbindkeys
#+end_src

*** Configuration
#+begin_src conf :tangle ~/.xbindkeysrc
"xset r off; xdotool key --clearmodifiers 'Escape'; xset r on"
    Control+semicolon
"xdotool key BackSpace"
    Release+Control+h
#+end_src

** Window Managers
*** EXWM
**** Desktop Entry
#+begin_src conf :tangle /sudo:://usr/share/xsessions/exwm.desktop
[Desktop Entry]
Name=exwm
Type=Application
Icon=exwm
Comment=The Emacs X Window Manager
TryExec=emacs
Exec=emacs -fs
#+end_src

**** Download Packages not on Melpa
***** EXWM Outer Gaps
***** Ivy Clipmenu
#+begin_src bash
cd ~/.config/emacs/lisp && wget https://raw.githubusercontent.com/mwglen/ivy-clipmenu.el/master/ivy-clipmenu.el
#+end_src

*** XMonad
**** Install
#+begin_src bash
$INSTALL xmonad xmonad-contrib
#+end_src

**** Configuration
***** Imports
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
-- Base
import XMonad
import System.Directory
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W

-- Actions
import XMonad.Actions.CopyWindow (kill1, copyToAll, killAllOtherCopies)
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)
import qualified XMonad.Actions.Search as S

-- Data
import Data.Char (isSpace, toUpper)
import Data.Maybe (fromJust)
import Data.Monoid
import Data.Maybe (isJust)
import Data.Tree
import qualified Data.Map as M

-- Hooks
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, docks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat, doRectFloat)
import XMonad.Hooks.ServerMode
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WorkspaceHistory

-- Layouts
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.ResizableTile

-- Layouts modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ShowWName
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.WindowNavigation
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

-- Utilities
import XMonad.Util.Dmenu
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
#+end_src

***** Variables
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
myModMask :: KeyMask
myModMask = mod4Mask

myTerminal :: String
myTerminal = "alacritty"

myBrowser :: String
myBrowser = "qutebrowser "

myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs' "

myEditor :: String
myEditor = "emacsclient -c -a 'emacs' "

myBorderWidth :: Dimension
myBorderWidth = 2

myNormalBorderColor :: String
myNormalBorderColor = "#dddddd"

myFocusedBorderColor :: String
myFocusedBorderColor = "#ff6666"

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = False

myClickJustFocuses :: Bool
myClickJustFocuses = True

myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]
myEventHook = ewmhDesktopsEventHook <+> fullscreenEventHook

logHook = ewmhDesktopsLogHook
  
--Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied
-- if fewer than two windows. So a single window has no gaps.
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True
#+end_src

***** Layouts
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
tall     = renamed [Replace "tall"]
           -- $ spacingRaw False (Border 0 30 30 30) True (Border 30 30 30 30) True
           -- $ spacingWithEdge 50
           $ windowNavigation
           $ limitWindows 12
           $ ResizableTall 1 (3/100) (1/2) []
monocle  = renamed [Replace "monocle"]
           $ smartBorders
           $ windowNavigation
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 20 Full
floats   = renamed [Replace "floats"]
           $ smartBorders
           $ limitWindows 20 simplestFloat
  
myLayoutHook = avoidStruts
            $ mouseResize
            $ windowArrange
            $ T.toggleLayouts floats
            $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
  where
    myDefaultLayout =     withBorder myBorderWidth tall
                      ||| noBorders monocle
                      ||| floats

#+end_src

***** Managehook
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
myManageHook = composeAll
    [ isFullscreen                  --> doFullFloat
    
    -- Picture in Picture (Firefox)
    -- , title =? "Picture-in-Picture"
    --  --> doRectFloat (W.RationalRect 0.65 0.07 0.3 0.3)
    -- , title =? "Picture-in-Picture"
    --  --> doF copyToAll
    -- , title =? "Picture-in-Picture"
    --  --> spawn "picom-trans -t -c 100",
      
    , className =? "confirm"        --> doFloat
    , className =? "file_progress"  --> doFloat
    , className =? "dialog"         --> doFloat
    , className =? "download"       --> doFloat 
    , className =? "error"          --> doFloat 
    , className =? "Gimp"           --> doFloat 
    , className =? "notification"   --> doFloat 
    , className =? "pinentry-gtk-2" --> doFloat 
    , className =? "splash"         --> doFloat 
    , className =? "toolbar"        --> doFloat 
    , resource  =? "download"       --> doIgnore
    , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat 
    ]
#+end_src

***** Startup Hook
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
myStartupHook :: X ()
myStartupHook = do
  spawnOnce "/usr/bin/emacs --daemon"
#+end_src

***** Keybindings
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
-- START_KEYS
myKeys :: [(String, X ())]
myKeys = [
  -- KB_GROUP Xmonad --
  -- recompile and restart xmonad
  ("M-q", spawn "xmonad --recompile; xmonad --restart"),
  -- exit xmonad
  ("M-S-q", io exitSuccess),
  -- run xmessage with a summary of the default keybindings
  ("M-S-/", spawn ("echo \"" ++ help ++ "\" | xmessage -file -")),

  -- APPLICATIONS --
  ("M-e", spawn "emacsclient -c"),
  ("M-S-s", spawn "flameshot gui"),

  --  PINNING WINDOWS --
  -- pin current window
  ("M-a", windows copyToAll),
  -- unpin current window
  ("M-S-a", killAllOtherCopies),
  
  -- ROFI --
  -- launch application with rofi
  ("M-p", spawn "rofi -show run"),
  -- goto window with rofi
  ("M-S-p", spawn "rofi -show window"),
  -- launch bitwarden-rofi 
  ("M-b", spawn "bwmenu"),
  
  -- TERMINAL --
  --("M-S-<Return>", spawn $ XMonad.terminal conf),
  -- CHANGE FOCUS --
  -- Move focus to the next window
  ("M-<Tab>", windows W.focusDown),
  -- Move focus to the next window
  ("M-<Tab>", windows W.focusDown),
  ("M-j", windows W.focusDown),
  -- Move focus to the previous window
  ("M-k", windows W.focusUp),
  -- Move focus to the master window
  ("M-m", windows W.focusMaster),

  -- Swap Windows --
  -- Swap the focused window and the master window
  ("M-<Return>", windows W.swapMaster),
  -- Swap the focused window with the next window
  ("M-S-j", windows W.swapDown),
  -- Swap the focused window with the previous window
  ("M-S-k", windows W.swapUp),

  -- Resize Windows --
  -- Resize viewed windows to the correct size
  ("M-n", refresh),
  -- Shrink the master area
  ("M-h", sendMessage Shrink),
  -- Expand the master area
  ("M-l", sendMessage Expand),

  -- Act On Windows --
  -- make current window opaque
  ("M-S-t", spawn "picom-trans -t -c 100"),
  -- toggle noborder/full
  ("M-f", sendMessage $ MT.Toggle NBFULL),
  ("M-g",  sendMessage ToggleStruts),

  ("M-S-f", toggleScreenSpacingEnabled
            >> toggleWindowSpacingEnabled
            >> sendMessage (MT.Toggle NBFULL)
            >> sendMessage ToggleStruts),
  
  -- close focused window
  ("M-S-c", kill),

  --  MODIFY LAYOUT --
  -- Rotate through the available layout algorithms
  ("M-<Space>", sendMessage NextLayout),
  --  Reset the layouts on the current workspace to default
  --("M-S-<Space>", setLayout $ XMonad.layoutHook conf),
  -- Push window back into tiling
  ("M-t", withFocused $ windows . W.sink),
  -- Increment the number of windows in the master area
  ("M-,", sendMessage (IncMasterN 1)),
  -- Deincrement the number of windows in the master area
  ("M-.", sendMessage (IncMasterN (-1)))]
#+end_src

***** Main
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
main :: IO ()
main = do
  -- Launch xmobar
  -- xmproc <- spawnPipe ("xmobar $XDG_CONFIG_HOME/xmobar/config")
    
  -- Launch polybar
  xmproc <- spawnPipe ("polybar xmonad")
  
  -- Start xmonad
  xmonad $ ewmh $ docks $ def {
    -- simple stuff
    terminal           = myTerminal,
    focusFollowsMouse  = myFocusFollowsMouse,
    clickJustFocuses   = myClickJustFocuses,
    borderWidth        = myBorderWidth,
    modMask            = myModMask,
    workspaces         = myWorkspaces,
    normalBorderColor  = myNormalBorderColor,
    focusedBorderColor = myFocusedBorderColor,
    -- hooks, layouts
    layoutHook         = spacingWithEdge 30 $ myLayoutHook,
    manageHook         = myManageHook,
    handleEventHook    = myEventHook,
    logHook            = dynamicLogWithPP (myLogHook),
    startupHook        = myStartupHook
    } `additionalKeysP` myKeys
#+end_src

***** Help
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs
help :: String
help = unlines [
  "The default modifier key is 'alt'. Default keybindings:",
  "",
  "-- launching and killing programs",
  "mod-Shift-Enter  Launch alacritty",
  "mod-p            Launch rufi",
  "mod-Shift-p      Launch gmrun",
  "mod-Shift-c      Close/kill the focused window",
  "mod-Space        Rotate through the available layout algorithms",
  "mod-Shift-Space  Reset the layouts on the current workSpace to default",
  "mod-n            Resize/refresh viewed windows to the correct size",
  "",
  "-- move focus up or down the window stack",
  "mod-Tab        Move focus to the next window",
  "mod-Shift-Tab  Move focus to the previous window",
  "mod-j          Move focus to the next window",
  "mod-k          Move focus to the previous window",
  "mod-m          Move focus to the master window",
  "",
  "-- modifying the window order",
  "mod-Return   Swap the focused window and the master window",
  "mod-Shift-j  Swap the focused window with the next window",
  "mod-Shift-k  Swap the focused window with the previous window",
  "",
  "-- resizing the master/slave ratio",
  "mod-h  Shrink the master area",
  "mod-l  Expand the master area",
  "",
  "-- floating layer support",
  "mod-t  Push window back into tiling; unfloat and re-tile it",
  "",
  "-- increase or decrease number of windows in the master area",
  "mod-comma  (mod-,)   Increment the number of windows in the master area",
  "mod-period (mod-.)   Deincrement the number of windows in the master area",
  "",
  "-- quit, or restart",
  "mod-Shift-q  Quit xmonad",
  "mod-q        Restart xmonad",
  "mod-[1..9]   Switch to workSpace N",
  "",
  "-- Workspaces & screens",
  "mod-Shift-[1..9]   Move client to workspace N",
  "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
  "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
  "",
  "-- Mouse bindings: default actions bound to mouse events",
  "mod-button1  Set the window to floating mode and move by dragging",
  "mod-button2  Raise the window to the top of the stack",
  "mod-button3  Set the window to floating mode and resize by dragging"
  ]
#+end_src

** Menu Systems
*** Rofi
**** Install
#+begin_src bash
$INSTALL rofi pinentry-rofi
#+end_src

**** Link Confirguration
#+begin_src bash
rm -rf $XDG_CONFIG_HOME/rofi
ln -s $DIR/rofi  $XDG_CONFIG_HOME/rofi
#+end_src

** Status Bars
*** XMobar
**** Install
#+begin_src bash
$INSTALL xmobar trayer ttf-mononoki
#+end_src

**** Configuration
#+begin_src haskell :tangle (concat (getenv "XDG_CONFIG_HOME") "/xmobar/config")
Config { 
   -- appearance
     font = "xft:NotoSans Nerd Font Mono:size=11:bold:antialias=true"
   , additionalFonts = [
       "xft:Mononoki Nerd Font:pixelsize=11:antialias=true:hinting=true"
     ]
   , bgColor =      "black"
   , fgColor =      "#646464"
   , alpha =        255
   , position =     BottomW C 80
   , border =       BottomB
   , borderColor =  "#646464"

   -- layout
   , sepChar =  "%"   -- delineator between plugin names and straight text
   , alignSep = "}{"  -- separator between left-right alignment
   , template = "%battery% | %bright% | <action=pavucontrol>%default:Master%</action> | %uptime% | %multicpu% | %coretemp% | %memory% | %wlan0wi% } { %KRDU% | %date% | %kbd% "

   -- general behavior
   , lowerOnStart =     True    -- send to bottom of window stack on start
   , hideOnStart =      False   -- start with window unmapped (hidden)
   , allDesktops =      True    -- show on all desktops
   , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
   , pickBroadest =     False   -- choose widest display (multi-monitor)
   , persistent =       True    -- enable/disable hiding (True = disabled)

   --, iconRoot = "/home/mwglen/.xmonad/xpm/"
   , commands = [
        -- time and date indicator 
        Run Date "<fn=1>\xf133</fn> %b %d %Y - (%H:%M)" "date" 50
        -- Up Time
        , Run Uptime ["-t", "Up: <days>d <hours>h <minutes>m"] 60
        
        , Run Brightness
          [ "-t", "Br: <percent>%", "--"
          , "-D", "intel_backlight"
          ] 1
        
        , Run Volume "default" "Master"
          [ "-t", "<status>", "--"
          , "--on", "<fc=#859900><fn=1>\xf028</fn>  <volume>%</fc>"
          , "--onc", "#859900"
          , "--off", "<fc=#dc322f><fn=1>\xf026</fn> MUTE</fc>"
          , "--offc", "#dc322f"
          ] 1

        -- weather monitor
        , Run Weather "KRDU" [ "--template", "<skyCondition> | <fc=#4682B4><tempC></fc>°C | <fc=#4682B4><rh></fc>% | <fc=#4682B4><pressure></fc>hPa"
                             ] 36000

        -- network activity monitor (dynamic interface resolution)
        , Run Wireless "wlan0" [ "--template" , "<ssid> <quality>"
                             , "--Low"      , "1000"       -- units: B/s
                             , "--High"     , "5000"       -- units: B/s
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 10

        -- cpu activity monitor
        , Run MultiCpu       [ "--template" , "Cpu: <total0>%"
                             , "--Low"      , "50"         -- units: %
                             , "--High"     , "85"         -- units: %
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 10

        -- cpu core temperature monitor
        , Run CoreTemp       [ "--template" , "Temp: <core0>°C"
                             , "--Low"      , "70"        -- units: °C
                             , "--High"     , "80"        -- units: °C
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 50
                          
        -- memory usage monitor
        , Run Memory         [ "--template" ,"Mem: <usedratio>%"
                             , "--Low"      , "20"        -- units: %
                             , "--High"     , "90"        -- units: %
                             , "--low"      , "darkgreen"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkred"
                             ] 10

        -- battery monitor
        , Run Battery        [ "--template" , "Batt: <acstatus>"
                             , "--Low"      , "10"        -- units: %
                             , "--High"     , "80"        -- units: %
                             , "--low"      , "darkred"
                             , "--normal"   , "darkorange"
                             , "--high"     , "darkgreen"

                             , "--" -- battery specific options
                                    -- discharging status
                                       , "-o"	, "<left>% (<timeleft>)"
                                       -- AC "on" status
                                       , "-O"	, "<fc=#dAA520>Charging</fc>"
                                       -- charged status
                                       , "-i"	, "<fc=#006000>Charged</fc>"
                             ] 50

        -- keyboard layout indicator
        , Run Kbd            [ ("us(dvorak)" , "<fc=#00008B>DV</fc>")
                             , ("us"         , "<fc=#8B0000>US</fc>")
                             ]
        , Run UnsafeStdinReader
        ]
   }
#+end_src

**** Scripts
#+begin_src bash :tangle (concat (getenv "XDG_CONFIG_HOME") "/xmobar/scripts/backlight.sh")
get_bri() {
cur_bri="$(cat /sys/class/backlight/intel_backlight/actual_brightness)"
bri_pct="$(expr $cur_bri \* 100 / 120000)"
}

get_bri
case $1 in
    "up")
        xbacklight -inc +2 > /dev/null ;;
    "down")
        xbacklight -dec +2- > /dev/null ;;
    ,*)
        exit 0 ;;
esac
#+end_src

** Notifications
*** Libnotify
Libnotify is an implementation of the Desktop Notifications Specification.
#+begin_src bash
$INSTALL libnotify
#+end_src

*** Dunst
In order to use libnotify you have to install a notification server. I use Dunst.
#+begin_src bash
$INSTALL dunst
#+end_src

**** Dunst Config
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/dunst/dunstrc")
:END:
See [[https://dunst-project.org/documentation/]]
#+begin_src conf
[global]
    ### Location ###
    follow = keyboard

    ### Geometry ###
    offset = 20x80
    width = (250, 500)
    height = 300
    transparency = 10  # Requires X11 and a compositor [0; 100]
    corner_radius = 5

    ### General Settings ###
    notification_limit = 0    # 0 means no limit
    separator_height = 2      # Distance between notifications
    show_age_threshold = 60

    ### Progress bar ###
    progress_bar_height = 10 # At least twice as big as frame width
    progress_bar_frame_width = 1
    progress_bar_min_width = 150
    progress_bar_max_width = 300

    # Padding between text and separator.
    padding = 8
    horizontal_padding = 8
    text_icon_padding = 0

    ### Frame around notification window ###
    frame_width = 0
    frame_color = "#aaaaaa" # Color 
    separator_color = frame # auto, foreground, frame, <any color>

    ### Text ###
    font = Monospace 10
    markup = full
    format = "<b>%s</b>\n%b"

    ### Icons ###
    icon_position = left # left/right/off
    min_icon_size = 0
    max_icon_size = 32
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### History ###
    sticky_history = yes
    history_length = 20

    ### Misc/Advanced ###
    dmenu = /usr/bin/dmenu

[urgency_low]
    background = "#222222"
    foreground = "#888888"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_normal]
    background = "#222222"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon
#+end_src

*** Battery Alerts (Might be Broken)
#+begin_src bash :tangle no
$INSTALL batsignal
sudo systemctl enable batsignal
#+end_src

**** Systemd Service
:PROPERTIES:
:header-args:conf: :tangle /sudo:://usr/lib/systemd/system/batsignal.service)
:END:
#+begin_src conf :tangle /sudo:://usr/lib/systemd/system/batsignal.service
[Unit]
Description=Lightweight battery daemon

[Service]
ExecStart=/usr/bin/batsignal -f 90 -w 30 -c 20 -d 10

[Install]
WantedBy=multi-user.target
#+end_src

** Virtualization
*** General
#+begin_src bash
$INSTALL libvirt qemu

# Network Connectivity with Virtual Machine #
$INSTALL iptables-nft    # NAT/DHCP Netowrking (iptables!=iptables-nft)
$INSTALL dnsmasq         # NAT/DHCP Netowrking
$INSTALL bridge-utils    # Bridged Networking
$INSTALL openbsd-netcat  # Remote Management over SSH

# Client Software #
$INSTALL virt-manager    # Graphically manage KVM, Xen or LXC

# Other Software #
$INSTALL libguestfs    # Access and modify virtual machine disk images
$INSTALL edk2-ovmf     # UEFI Emulation
$INSTALL swtpm         # TPM Emulation
         
# Members of the libvirt group have passwordless access to the RW daemon socket by default.
sudo usermod -a -G libvirt $USER
sudo usermod -a -G kvm $USER

sudo systemctl enable --now libvirtd # Also enables virtlogd and virtlockd
sudo systemctl start virtlogd

# Make sure to set user = /etc/libvirt/qemu.conf
#+end_src

*** OSX Machine
To create an OSX Virtual Machine check out the ~OSX-KVM~ project and follow the instructions in their git repository.

** Applications
*** Mimeo
Use =mimeo --mime2desk <schema>= to find what application is set as default for a certain schema. Use =mimeo --app2desk <app>= to find an applications corresponding desktop file.
#+begin_src bash
$INSTALL mimeo
#+end_src

*** File Managers
**** Dolphin
#+begin_src bash
$INSTALL dolphin
#+end_src

**** Ranger
#+begin_src bash
$INSTALL ranger python-ueberzug-git
#+end_src

***** Config
#+begin_src conf :tangle (concat (getenv "XDG_CONFIG_HOME") "/ranger/rc.conf")
set viewmode miller
set column_ratios 1,3,4
set confirm_on_delete always
set use_preview_script true
set vcs_aware true
set preview_images true
set preview_images_method ueberzug
set tilde_in_titlebar true
set draw_borders both
set display_size_in_main_column false
set show_hidden false
set colorscheme default
#+end_src

*** Gotop
#+begin_src bash
$INSTALL gotop
#+end_src

*** Cava
#+begin_src bash
$INSTALL cava
#+end_src

*** Alsi
#+begin_src bash
$INSTALL alsi
#+end_src

*** Emacs
**** Install
#+begin_src bash
$INSTALL emacs28-git
#+end_src

**** Ahoviewer
#+begin_src bash
$INSTALL ahoviewer-git
#+end_src

**** Apply Theme
#+begin_src bash
ln $DIR/doom-moonless-theme.el ~/.emacs.d/doom-moonless-theme.el
#+end_src

**** Tangle Config
***** Setup Nim and Nimble
#+begin_src bash
$INSTALL nim nimble
#+end_src

***** Setup ntangle
#+begin_src bash
nimble install -y ntangle
#+end_src

**** Enable Daemon
#+begin_src bash
rm -rf ~/.emacs.d
ln -s $XDG_CONFIG_HOME/emacs ~/.emacs.d
rm -rf ~/backgrounds
ln -s $DIR/backgrounds ~/backgrounds

#sudo systemctl enable --now --user emacs
#+end_src

*** Firefox
#+begin_src bash
$INSTALL firefox
#+end_src

*** Blender
#+begin_src bash
$INSTALL blender blendnet
#+end_src

*** Flameshot
**** Install
#+begin_src bash
$INSTALL flameshot
#+end_src

**** Config
:PROPERTIES:
:header-args:conf: :tangle (concat (getenv "XDG_CONFIG_HOME") "/flameshot/flameshot.ini")
:END:
#+begin_src conf
[General]
buttons=@Variant(\0\0\0\x7f\0\0\0\vQList<int>\0\0\0\0\x16\0\0\0\0\0\0\0\x1\0\0\0\x2\0\0\0\x3\0\0\0\x4\0\0\0\x5\0\0\0\x6\0\0\0\x12\0\0\0\xf\0\0\0\a\0\0\0\b\0\0\0\t\0\0\0\x10\0\0\0\n\0\0\0\v\0\0\0\f\0\0\0\r\0\0\0\xe\0\0\0\x11\0\0\0\x13\0\0\0\x14\0\0\0\x15)
contrastOpacity=188
contrastUiColor=#00789e
disabledTrayIcon=false
drawColor=#ffff00
drawFontSize=8
drawThickness=1
ignoreUpdateToVersion=11.0.0
savePath=/home/mwglen/Pictures
savePathFixed=false
showStartupLaunchMessage=true
startupLaunch=true
uiColor=#ffffff

[Shortcuts]
TYPE_ARROW=A
TYPE_CIRCLE=C
TYPE_CIRCLECOUNT=
TYPE_COMMIT_CURRENT_TOOL=Ctrl+Return
TYPE_COPY=Ctrl+C
TYPE_DELETE_CURRENT_TOOL=Del
TYPE_DRAWER=D
TYPE_EXIT=Ctrl+Q
TYPE_MARKER=M
TYPE_MOVESELECTION=Ctrl+M
TYPE_MOVE_DOWN=Down
TYPE_MOVE_LEFT=Left
TYPE_MOVE_RIGHT=Right
TYPE_MOVE_UP=Up
TYPE_OPEN_APP=Ctrl+O
TYPE_PENCIL=P
TYPE_PIN=
TYPE_PIXELATE=B
TYPE_RECTANGLE=R
TYPE_REDO=Ctrl+Shift+Z
TYPE_RESIZE_DOWN=Shift+Down
TYPE_RESIZE_LEFT=Shift+Left
TYPE_RESIZE_RIGHT=Shift+Right
TYPE_RESIZE_UP=Shift+Up
TYPE_SAVE=Ctrl+S
TYPE_SELECTION=S
TYPE_SELECTIONINDICATOR=
TYPE_SELECT_ALL=Ctrl+A
TYPE_TEXT=T
TYPE_TOGGLE_PANEL=Space
TYPE_UNDO=Ctrl+Z
#+end_src

*** Qutebrowser
**** Install
#+begin_src bash
$INSTALL qutebrowser python-qutescript-git
mkdir -p $XDG_DATA_HOME/qutebrowser/userscripts
#+end_src

**** Userscripts
***** Qute-Bitwarden
:PROPERTIES:
:header-args:python: :tangle (concat (getenv "XDG_DATA_HOME") "/qutebrowser/userscripts/qute-bitwarden") :tangle-mode (identity #o755)
:END:
#+begin_src python
#!/usr/bin/python3

"""
Insert login information using Bitwarden CLI and a dmenu-compatible application
(e.g. dmenu, rofi -dmenu, ...).
"""

USAGE = """The domain of the site has to be in the name of the Bitwarden entry, for example: "github.com/cryzed" or "websites/github.com".  The login information is inserted by emulating key events using qutebrowser's fake-key command in this manner: [USERNAME]<Tab>[PASSWORD], which is compatible with almost all login forms.

If enabled, with the `--totp` flag, it will also move the TOTP code to the clipboard, much like the Firefox add-on.

You must log into Bitwarden CLI using `bw login` prior to use of this script. The session key will be stored using keyctl for the number of seconds passed to the --auto-lock option.

To use in qutebrowser, run: `spawn --userscript qute-bitwarden`
"""

EPILOG = """Dependencies: tldextract (Python 3 module), pyperclip (optional Python module, used for TOTP codes), Bitwarden CLI (1.7.4 is known to work but older versions may well also work)

WARNING: The login details are viewable as plaintext in qutebrowser's debug log (qute://log) and might be shared if you decide to submit a crash report!"""

import argparse
import enum
import functools
import os
import shlex
import subprocess
import sys
import json
import tldextract

argument_parser = argparse.ArgumentParser(
    description=__doc__,
    usage=USAGE,
    epilog=EPILOG,
)
argument_parser.add_argument('url', nargs='?', default=os.getenv('QUTE_URL'))
argument_parser.add_argument(
    '--dmenu-invocation', '-d', default='rofi -dmenu -i -p Bitwarden',
    help='Invocation used to execute a dmenu-provider')
argument_parser.add_argument(
    '--no-insert-mode', '-n', dest='insert_mode', action='store_false',
    help="Don't automatically enter insert mode")
argument_parser.add_argument(
    '--totp', '-t', action='store_true',
    help="Copy TOTP key to clipboard")
argument_parser.add_argument(
    '--io-encoding', '-i', default='UTF-8',
    help='Encoding used to communicate with subprocesses')
argument_parser.add_argument(
    '--merge-candidates', '-m', action='store_true',
    help='Merge pass candidates for fully-qualified and registered domain name')
argument_parser.add_argument(
    '--auto-lock', type=int, default=900,
    help='Automatically lock the vault after this many seconds')
group = argument_parser.add_mutually_exclusive_group()
group.add_argument(
    '--username-only', '-e', action='store_true',
    help='Only insert username')
group.add_argument(
    '--password-only', '-w', action='store_true',
    help='Only insert password')
group.add_argument(
    '--totp-only', '-T', action='store_true',
    help='Only insert totp code')

stderr = functools.partial(print, file=sys.stderr)


class ExitCodes(enum.IntEnum):
    SUCCESS = 0
    FAILURE = 1
    # 1 is automatically used if Python throws an exception
    NO_PASS_CANDIDATES = 2
    COULD_NOT_MATCH_USERNAME = 3
    COULD_NOT_MATCH_PASSWORD = 4

def qute_command(command):
    with open(os.environ['QUTE_FIFO'], 'w') as fifo:
        fifo.write(command + '\n')
        fifo.flush()

def ask_password():
    process = subprocess.run([
        'rofi',
        '-dmenu',
        '-p',
        'Master Password',
        '-password',
        '-lines',
        '0',
    ], universal_newlines=True, stdout=subprocess.PIPE)
    if process.returncode > 0:
        raise Exception('Could not unlock vault')
    master_pass = process.stdout.strip()
    return subprocess.check_output(
        ['bw', 'unlock', '--raw', master_pass],
        universal_newlines=True,
    ).strip()


def get_session_key(auto_lock):
    if auto_lock == 0:
        subprocess.call(['keyctl', 'purge', 'user', 'bw_session'])
        return ask_password()
    else:
        process = subprocess.run(
            ['keyctl', 'request', 'user', 'bw_session'],
            universal_newlines=True,
            stdout=subprocess.PIPE,
        )
        key_id = process.stdout.strip()
        if process.returncode > 0:
            session = ask_password()
            if not session:
                raise Exception('Could not unlock vault')
            key_id = subprocess.check_output(
                ['keyctl', 'add', 'user', 'bw_session', session, '@u'],
                universal_newlines=True,
            ).strip()

        if auto_lock > 0:
            subprocess.call(['keyctl', 'timeout',
                             str(key_id), str(auto_lock)])
        return subprocess.check_output(
            ['keyctl', 'pipe', str(key_id)],
            universal_newlines=True,
        ).strip()


def pass_(domain, encoding, auto_lock):
    session_key = get_session_key(auto_lock)
    process = subprocess.run(
        ['bw', 'list', 'items', '--session',
         session_key, '--url', domain],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    err = process.stderr.decode(encoding).strip()
    if err:
        msg = 'Bitwarden CLI returned for {:s} - {:s}'.format(
            domain, err)
        stderr(msg)
    out = process.stdout.decode(encoding).strip()
    return out


def get_totp_code(selection_id, domain_name, encoding, auto_lock):
    session_key = get_session_key(auto_lock)
    process = subprocess.run(
        ['bw', 'get', 'totp', '--session', session_key, selection_id],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    err = process.stderr.decode(encoding).strip()
    if err:
        # domain_name instead of selection_id to make it more
        # user-friendly
        msg = 'Bitwarden CLI returned for {:s} - {:s}'.format(
            domain_name, err)
        stderr(msg)

    if len(candidates) == 0:
        return ExitCodes.SUCCESS
    if process.returncode:
        return '[]'
    out = process.stdout.decode(encoding).strip()
    return out


def dmenu(items, invocation, encoding):
    command = shlex.split(invocation)
    process = subprocess.run(command, input='\n'.join(
        items).encode(encoding), stdout=subprocess.PIPE)
    return process.stdout.decode(encoding).strip()


def fake_key_raw(text):
    for character in text:
        # Escape all characters by default, space requires special
        # handling
        sequence = '" "' if character == ' ' else '\{}'.format(character)
        qute_command('fake-key {}'.format(sequence))


def main(arguments):
    if not arguments.url:
        argument_parser.print_help()
        return ExitCodes.FAILURE

    extract_result = tldextract.extract(arguments.url)

    # Try to find candidates using targets in the following order:
    # fully-qualified domain name (includes subdomains),
    # the registered domain name and finally: the IPv4 address if that's
    # what the URL represents
    candidates = []
    for target in filter(None, [
                extract_result.fqdn,
                extract_result.registered_domain,
                extract_result.subdomain + extract_result.domain,
                extract_result.domain,
                extract_result.ipv4]):
        target_candidates = json.loads(
            pass_(
                target,
                arguments.io_encoding,
                arguments.auto_lock,
            )
        )
        if not target_candidates:
            continue

        candidates = candidates + target_candidates
        if not arguments.merge_candidates:
            break
        
    if len(candidates) == 1:
        selection = candidates.pop()
    else:
        choices = ['{:s} | {:s}'.format(
            c['name'], c['login']['username']) for c in candidates]
        choice = dmenu(
            choices, arguments.dmenu_invocation, arguments.io_encoding)
        choice_tokens = choice.split('|')
        choice_name = choice_tokens[0].strip()
        try:
            choice_username = choice_tokens[1].strip()
        except Exception as e:
            return ExitCodes.SUCCESS
        selection = next((c for (i, c) in enumerate(candidates)
                          if c['name'] == choice_name
                          and c['login']['username'] == choice_username),
                         None)

    # Nothing was selected, simply return
    if not selection:
        return ExitCodes.SUCCESS

    username = selection['login']['username']
    password = selection['login']['password']
    totp = selection['login']['totp']

    if arguments.username_only:
        fake_key_raw(username)
    elif arguments.password_only:
        fake_key_raw(password)
    elif arguments.totp_only:
        # No point in moving it to the clipboard in this case
        fake_key_raw(
            get_totp_code(
                selection['id'],
                selection['name'],
                arguments.io_encoding,
                arguments.auto_lock
            )
        )
    else:
        # Enter username and password using fake-key and <Tab> (which
        # seems to work almost universally), then switch
        # back into insert-mode, so the form can be directly submitted by
        # hitting enter afterwards
        fake_key_raw(username)
        qute_command('fake-key <Tab>')
        fake_key_raw(password)

    if arguments.insert_mode:
        qute_command('mode-enter insert')

    # If it finds a TOTP code, it copies it to the clipboard,
    # which is the same behavior as the Firefox add-on.
    if not arguments.totp_only and totp and arguments.totp:
        # The import is done here, to make pyperclip an optional
        # dependency
        import pyperclip
        pyperclip.copy(
            get_totp_code(
                selection['id'],
                selection['name'],
                arguments.io_encoding,
                arguments.auto_lock
            )
        )

    return ExitCodes.SUCCESS


if __name__ == '__main__':
    arguments = argument_parser.parse_args()
    sys.exit(main(arguments))
#+end_src

**** Configuration
:PROPERTIES:
:header-args:python: :tangle (concat (getenv "XDG_CONFIG_HOME") "/qutebrowser/config.py")
:END:
#+begin_src python
# Set to True to load settings configured via autoconfig.yml
config.load_autoconfig(False)
c.qt.highdpi = True
c.auto_save.session = False
c.aliases = {
    'q': 'quit',
    'w': 'session-save',
    'wq': 'quit --save'
}
config.set("colors.webpage.darkmode.enabled", True)
c.completion.show = "auto"
c.downloads.location.directory = '~/Downloads'
c.tabs.show = 'never'
c.statusbar.show = 'never'
c.scrolling.bar = 'never'
c.scrolling.smooth = True

# Fonts
c.fonts.default_family = '"NotoSans Nerd Font"'
c.fonts.default_size = '11pt'
c.fonts.completion.entry = '11pt "NotoSans Nerd Font"'
c.fonts.debug_console = '11pt "NotoSans Nerd Font"'
c.fonts.prompts = 'default_size "NotoSans Nerd Font"'
c.fonts.statusbar = '11pt "NotoSans Nerd Font"'

# Use dmenu
#config.bind('o', 'spawn --userscript dmenu-open')
#config.bind('O', 'spawn --userscript dmenu-open --tab')

config.bind('pw', 'spawn --userscript qute-bitwarden')
config.bind('pu', 'spawn --userscript qute-bitwarden -e')
config.bind('pd', 'spawn --userscript qute-bitwarden -w')

# Colors
c.colors.completion.fg = ['#9cc4ff', 'white', 'white']
c.colors.completion.odd.bg = '#1c1f24'
c.colors.completion.even.bg = '#232429'
c.colors.completion.category.fg = '#e1acff'
c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #000000, stop:1 #232429)'
c.colors.completion.category.border.top = '#3f4147'
c.colors.completion.category.border.bottom = '#3f4147'
c.colors.completion.item.selected.fg = '#282c34'
c.colors.completion.item.selected.bg = '#ecbe7b'
c.colors.completion.item.selected.match.fg = '#c678dd'
c.colors.completion.match.fg = '#c678dd'
c.colors.completion.scrollbar.fg = 'black'
c.colors.downloads.bar.bg = '#282c34'
c.colors.downloads.error.bg = '#ff6c6b'
c.colors.hints.fg = '#282c34'
c.colors.hints.match.fg = '#98be65'
c.colors.messages.info.bg = '#282c34'
c.colors.statusbar.normal.bg = '#282c34'
c.colors.statusbar.insert.fg = 'white'
c.colors.statusbar.insert.bg = '#497920'
c.colors.statusbar.passthrough.bg = '#34426f'
c.colors.statusbar.command.bg = '#282c34'
c.colors.statusbar.url.warn.fg = 'yellow'
c.colors.tabs.bar.bg = '#1c1f34'
c.colors.tabs.odd.bg = '#282c34'
c.colors.tabs.even.bg = '#282c34'
c.colors.tabs.selected.odd.bg = '#282c34'
c.colors.tabs.selected.even.bg = '#282c34'
c.colors.tabs.pinned.odd.bg = 'seagreen'
c.colors.tabs.pinned.even.bg = 'darkseagreen'
c.colors.tabs.pinned.selected.odd.bg = '#282c34'
c.colors.tabs.pinned.selected.even.bg = '#282c34'

# Search Engines
c.url.searchengines = {
    'DEFAULT': 'https://www.google.com/search?q={}',
    'arch':    'https://wiki.archlinux.org/?search={}',
    'wiki':    'https://en.wikipedia.org/wiki/{}',
    'yt':      'https://www.youtube.com/results?search_query={}'
}

# Normal Mode Keybindings
config.bind(';m', 'hint links spawn baka-mplayer {hint-url}')
config.bind('M', 'spawn baka-mplayer {url}')
config.bind('xb', 'config-cycle statusbar.show always never')
config.bind('xt', 'config-cycle tabs.show always never')
config.bind('xx', 'config-cycle statusbar.show always never;; config-cycle tabs.show always never')
#+end_src

**** Solarized Themes
#+begin_src bash
mkdir -p $XDG_CONFIG_HOME/qutebrowser
mkdir -p ~/Downloads
cd $XDG_CONFIG_HOME/qutebrowser && git clone https://github.com/alphapapa/solarized-everything-css && true
#+end_src

*** Bitwarden
#+begin_src bash
$INSTALL bitwarden bitwarden-cli bitwarden-rofi
#+end_src

*** Sidequest
#+begin_src bash
$INSTALL sidequest-bin
#+end_src

*** GlxInfo
#+begin_src bash
$INSTALL glxinfo
#+end_src

*** Spotify
#+begin_src bash
$INSTALL spotify
#+end_src

**** Desktop File (With Fix for HiDPI)
#+begin_src conf :tangle /sudo:://usr/share/applications/spotify.desktop
[Desktop Entry]
Type=Application
Name=Spotify
GenericName=Music Player
Icon=spotify-client
TryExec=spotify
Exec=spotify --force-device-scale-factor=2 %U
Terminal=false
MimeType=x-scheme-handler/spotify;
Categories=Audio;Music;Player;AudioVideo;
StartupWMClass=spotify
#+end_src

**** Desktop File (With Fix for HiDPI)
#+begin_src conf :tangle /sudo:://opt/spotify/spotify.desktop
[Desktop Entry]
Type=Application
Name=Spotify
GenericName=Music Player
Icon=spotify-client
TryExec=spotify
Exec=spotify --force-device-scale-factor=2 %U
Terminal=false
MimeType=x-scheme-handler/spotify;
Categories=Audio;Music;Player;AudioVideo;
StartupWMClass=spotify
#+end_src

*** Discord
#+begin_src bash
$INSTALL discord
#+end_src

*** Libreoffice
#+begin_src bash
$INSTALL libreoffice-fresh libreoffice-fresh-ru
#+end_src

*** Git-Annex
#+begin_src bash
$INSTALL git-annex
#+end_src

*** Redshift
#+begin_src bash
$INSTALL redshift
#+end_src

*** OBS Studio
#+begin_src bash
$INSTALL obs-studio
#+end_src

*** Podman
#+begin_src bash
$INSTALL podman
echo "unqualified-search-registries = ['docker.io']" \
    | sudo tee /etc/containers/registries.conf
#+end_src

*** Feh
**** Install
#+begin_src bash
$INSTALL feh
#+end_src

**** Copy Over Backgrounds
#+begin_src bash
mkdir -p $BACKGROUNDS
cp -r $DIR/backgrounds/* $BACKGROUNDS
#+end_src

**** Gifs as Backgrounds
#+begin_src bash
curl -L https://raw.githubusercontent.com/thomas10-10/foo-Wallpaper-Feh-Gif/master/install.sh | bash
#back4.sh 0.010 gif/pixel.gif &
#+end_src


*** Neovim
**** Install
#+begin_src bash
$INSTALL neovim
mkdir -p $XDG_CONFIG_HOME/nvim
curl -fLo $XDG_DATA_HOME/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

**** Configuration
:PROPERTIES:
:header-args:vimrc: :tangle (concat (getenv "XDG_CONFIG_HOME") "/nvim/init.vim")
:END:
#+begin_src vimrc
call plug#begin('$XDG_CONFIG_HOME/nvim/plugged')
Plug 'jacoborus/tender.vim'
Plug 'LnL7/vim-nix'
Plug 'rust-lang/rust.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
call plug#end()

set number relativenumber       " set line-numbers to be relative
set nohlsearch                  " no highlight search
set mouse=a                     " recognize and enable mouse
set tabstop=4                   " show existing tab as 4 spaces
set shiftwidth=4                " use 4 spaces when indenting with '>'
set expandtab                   " on pressing tab, insert 4 spaces
set termguicolors               " use terminal colors
set ignorecase
set smartcase
set nobackup
let g:airline_powerlin_fonts=1  " set airline theme
colorscheme tender              " change the colorscheme
let g:airline_theme = 'tender'  " change airline colorscheme
#+end_src

*****  Colors
#+begin_src vimrc
let bg = "#000000"
let fg = "#d5d8d6"
let base0 = "#0d0d0d"
let base1 = "#1b1b1b"
let base2 = "#212122"
let base3 = "#292b2b"
let base4 = "#3f4040"
let base5 = "#5c5e5e"
let base6 = "#757878"
let base7 = "#969896"
let base8 = "#ffffff"

let black     = "#000000"
let white     = "#ffffff"
let grey      = "#5a5b5a" 
let red       = "#cc6666" 
let orange    = "#de935f"
let yellow    = "#f0c674"
let green     = "#b5bd68"
let blue      = "#81a2be"
let teal      = "#81a2be"
let magenta   = "#c9b4cf"
let violet    = "#b294bb"
let cyan      = "#8abeb7"

execute "hi! Normal guibg=" . bg
execute "hi! String guifg=" . green
execute "hi! Keyword guifg=" . violet
execute "hi! Type guifg=" . yellow
execute "hi! Operator guifg=" . fg
execute "hi! Number guifg=" . orange
execute "hi! Function guifg=" . blue
execute "hi! Constant guifg=" . orange
execute "hi! Comment guifg=" . grey
execute "hi! Conditional guifg=" . violet
#+end_src

** Change Shell
#+begin_src bash
sudo chsh -s /usr/bin/zsh $USER
#+end_src

* After Setup
** Exporting PGP Keys
#+begin_src bash
gpg --output public.pgp --armor --export username@email
gpg --output private.pgp --armor --export-secret-key username@email

# Backup Private Keys
gpg --output backupkeys.pgp --armor --export-secret-keys --export-options export-backup user@email
#+end_src

** Linux Password Manager
#+begin_src bash :tangle no
$INSTALL -S pass
pass init "62EC2C26" # Use the last 8 characters of your GPG key's ID
#+end_src

The =passfs= addon for firefox allows you to use your password store while browsing in firefox
The =Password Store= android app allows you to access your passwords on  
