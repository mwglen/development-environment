;; Change garbage collection threshold
(setq gc-cons-threshold (* 50 1000 1000))

;(toggle-frame-fullscreen)
(custom-set-variables
    '(initial-frame-alist (quote ((fullscreen . fullscreen)))))

;; Remove default UI
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)

;; Setup fonts
(set-face-attribute 'default nil
    :font "Noto Sans Mono" 
    :height 100)

;; Setup line numbers
(column-number-mode)
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                 term-mode-hook
                 eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; Make ESC quit prompts (Might not need due to evil mode)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ("org" . "https://orgmode.org/elpa/")
  ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
;(setq use-package-always-defer t)

;; Setup Doom Modeline
(use-package all-the-icons
  :if (display-graphic-p))
; (M-x all-the-icons-install-fonts)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 30))

(use-package doom-themes)
(load-theme 'doom-tomorrow-night t)

;; Completion Frameworks (Helm and Ivy)
;; Setup Ivy
(use-package ivy
  :diminish
  :bind (("C-S" . swiper)
	  :map ivy-minibuffer-map
	  ("TAB" . ivy-alt-done)
	  ("C-l" . ivy-alt-done)
	  ("C-j" . ivy-next-line)
	  ("C-k" . ivy-previous-line)
	  :map ivy-switch-buffer-map
	  ("C-k" . ivy-previous-line)
	  ("C-l" . ivy-done)
	  ("C-d" . ivy-switch-buffer-kill)
	  :map ivy-reverse-i-search-map
	  ("C-k" . ivy-previous-line)
	  ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; Setup counsel
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil))

;; Setup Ivy-Rich (requires counsel)
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

;; Setup Which-Key (doesn't work)
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

(use-package helpful
 :custom
 (counsel-describe-function-function #'helpful-callable)
 (counsel-describe-variable-function #'helpful-variable)
 :bind
 ([remap describe-function] . counsel-describe-function)
 ([remap describe-command] . helpful-command)
 ([remap describe-variable] . counsel-describe-variable)
 ([remap describe-key] . helpful-key))

; (defun rune/evil-hook ()
;   (dolist (mode '(custom-mode
		  ; eshell-mode
		  ; git-rebase-mode
		  ; erc-mode
		  ; circe-server-mode
		  ; circe-chat-mode
		  ; circe-query-mode
		  ; sauron-mode
		  ; term-mode))
    ; (add-to-list 'evil-emacs-state-modes mode)))

;; Setup Evil
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  ; (setq evil-want-C-i-jump nil)
  ; :hook (evil-mode . rune/evil-hook)
  :config
  (evil-mode 1)
  ; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

(use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

;; Setup keybindings
; (use-package general
;   :config
;   (general-evil-setup t)
;   (general-create-definer rune/leader-keys
;     :keymaps '(normal insert visual emacs)
;     :prefix "SPC"
;     :global-prefix "C-SPC"))

; (rune/leader-keys
;   "t" '(:ignore t :which-key "toggles")
  ; "tt" '(counsel-load-theme :which-key "choose theme"))

;; Setup Projectile
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

;; Setup Magit
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;(use-package evil-magit
;  :after magit)

;; Setup forge
;(use-package forge)

;; Setup Org Mode
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis "..."
	org-hide-emphasis-markers t))

;(use-package org-bullets
;  :after org
;  :hook (org-mode . org-bullets-mode)
;  :custom
;  (org-bullets-bullet-list '("" "" "" "" "" "" "")))

;(dolist (face '((org-level-1 . 1.2)
;		(org-level-2 . 1.1)
;		(org-level-3 . 1.05)
;		(org-level-4 . 1.0)
;		(org-level-5 . 1.1)
;		(org-level-6 . 1.1)
;		(org-level-7 . 1.1)
;		(org-level-8 . 1.1)))
;  (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

(custom-set-variables
 '(custom-safe-themes
   '("4b0e826f58b39e2ce2829fab8ca999bcdc076dec35187bf4e9a4b938cb5771dc" "f7fed1aadf1967523c120c4c82ea48442a51ac65074ba544a5aefc5af490893b" default))
 '(package-selected-packages '(doom-themes use-package evil)))
(custom-set-faces
 )
